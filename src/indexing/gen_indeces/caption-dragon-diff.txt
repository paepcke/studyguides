1,756c1,833
< 1950s
< abstract syntax tree
< abstraction
< accumulator
< activation record
< actual
< actual argument
< adding
< additional
< address
< advantage
< ago
< algorithm recursive descent
< aliveness
< allocate
< allocated
< allocating
< allocation
< allowed
< allows
< alpha
< alphabet
< alternative
< ambiguous
< amount
< analogy
< analysis parsing
< analysis parsing semantic
< analysis video
< analyzer
< answer
< application
< applied
< apply
< approach
< appropriate
< arbitrary
< architecture
< area
< argument
< array
< assembly code
< assigned
< assignment register
< associated
< assume
< attribute
< automatic memory
< automatic memory management
< automaton recognizes
< bad
< based
< basic
< basic block
< behavior program
< beta
< better
< bigger
< binding
< blank
< block memory
< body
< boolean
< bottom entry
< bottom parser trace
< bottom parser trace rightmost
< bottom parsing
< bottom stack
< bottomup parsing
< bound
< brace
< branch
< bug
< build dfa
< building
< built
< bunch
< cache
< callee
< calling
< case y1
< case y1 yn
< catch
< change overtime
< change overtime replace nonterminal
< changed
< characteristic
< check expression
< check type
< checked
< checking cool
< checking discussion
< checking rule cool
< choice
< class definition
< class grammar
< class inherits
< class method
< class white
< class white space
< clearly
< close
< close paren
< closed paren
< code compiler
< code fragment
< code generator
< code program
< code variable
< coerced
< coercion cast
< cogeneration function
< collect
< collection automatic
< collection automatic memory management
< colon
< color node
< coloring
< coloring graph
< coming
< coming input
< common
< compilation
< compile time
< compiled
< compiler interpreter
< compiler phase
< compiler produce
< compiles
< completely
< complex
< complicated
< computation
< compute
< computed
< computer
< computing
< condition
< configuration
< conflict state
< consider
< consisting
< consists
< constructed
< construction
< content stack
< context free grammar
< contextfree grammar
< continue
< continue discussion
< control flow graph
< conversion
< converting
< cool class
< cool example
< cool program
< cool type
< copy object
< correct
< couple
< course
< cover
< covered
< creates
< current
< data flow analysis
< data structure
< dead
< deal
< decide
< decision
< declaration
< declare type
< declared
< default
< defined
< defining
< definition
< definition class
< delete
< depend
< derivation
< derivation string
< descent algorithm
< descent parsing
< describe
< described
< describing
< description
< designed
< detail
< deterministic automaton
< dfa
< dfa read
< dfa state
< diagram
< didn
< difference
< directly
< directly assembly code
< discussed previous
< discussing
< discussion parsing
< discussion time
< dispatch
< dive
< doesn
< dollar
< domain
< don program
< dot
< dot cl
< dynamic
< easy
< edge
< efficient
< elaborate
< element
< empty
< english
< enter
< entire
< environment
< epsilon
< equal
< equivalent
< error
< essentially
< evaluate expression
< evaluates
< evaluating
< evaluation
< exactly
< example consider
< example cool
< example grammar
< example video
< exception
< execute
< executed
< executing
< execution
< exist
< exit
< expected
< explain
< explicit
< expressed
< expression rule
< expression start
< expressive
< extend
< extremely
< fact
< factorial
< fairly
< false
< familiar
< family
< faster
< favorite
< favorite grammar
< fewer
< field
< figure
< file
< finally
< find
< finite automaton
< first set
< first statement
< first step
< first talk
< fixed
< focus
< foo
< formal
< formal language
< formal operational semantics
< fortran
< frame pointer
< full
< function call
< function definition
< future
< future video
< garbage collection technique
< generally
< generate code
< generate code variable
< generate intermediate code
< generated permanent feature string
< generating
< generating code
< generation language
< generation simple programming
< generation simple programming language
< generation strategy
< generation talk
< generator
< generic
< global constant propagation
< global variable
< goal
< good news
< grammar couple video
< grammar example
< grammar fragment
< grammar fragment inaudible
< grammar notice
< grammar slr
< grammar start
< grammar string
< grammar terminal token language
< grammar time
< graph coloring
< graph node
< graph notice
< graph stuck
< greater
< group
< grow
< gtgt
< guess
< halt state
< hand side
< hand side case
< hand side production
< handle
< handle error
< handling
< happen
< hard
< haven
< header
< heap
< heuristic
< hierarchy
< high level
< higher
< highlight
< hold
< human
< hypothesis
< identifier
< identify
< ifelse
< ifelse rule
< illustrate
< illustrates
< implementation
< implementation dfa
< implemented
< implementing
< implication
< improve program
< improvement program
< inaudible expression
< inaudible parser
< included string
< included string rule
< included string rule replacing
< includes
< including
< inconsistent
< incorporate
< incorporate selftype type
< individual
< inference rule
< inheritance
< initialization
< initialize
< initially
< inner
< input follow
< input item
< input move
< input shift
< input situation
< input stack
< input stream
< input string
< inside
< instruction
< int time
< integer
< interesting
< interface
< interference graph
< intermediate language
< interpreter
< introduce
< introduction
< isn
< issue
< item
< item valid
< iteration
< java
< job
< key
< keyword
< keywords
< kuhl
< label
< language contextfree
< language lexical
< large
< layout
< lead
< leaf
< learned
< leave
< lecture
< left hand side
< left string
< length
< lexical analysis
< lexical analysis parsing
< lexical analysis parsing semantic
< lexical analyzer
< lexical specification
< lexically
< limitation
< list
< liveness
< ll1
< load
< local optimization
< logical
< long time
< longer
< looked
< loop
< lot
< lr0
< machine code
< magic
< main method
< major
< mark
< marked
< match
< meaning
< memory management
< mentioned
< message
< method call
< method return
< mind
< minute
< missing
< mistake
< model
< modern
< moment
< move shift
< move state
< move vertical bar
< multiple
< named
< natural
< needed
< neighbor
< nested
< nice
< node
< nondeterministic
< nondeterministic automaton
< nondeterministic finite
< nondeterministic finite automaton
< nonterminal string
< nonterminals
< normal
< notation
< note
< notion type
< number register
< object oriented
< object oriented language
< object type
< oneltigt
< open
< open paren
< operation
< operator
< optimization discussed
< optimize
< optimizing
< order
< organization
< oriented language
< original
< outer
< output
< overview
< overview cool
< pair
< parameter
< paren shift
< parens
< parse tree
< parser trace
< parsing algorithm
< parsing automaton
< parsing semantic
< parsing table
< parsings
< path
< peephole
< people
< perfectly
< perform
< phase
< pick
< picture
< piece code
< point object
< point program
< pointer point
< popular
< portion
< position
< possibility
< practice
< precedence
< predecessor
< predicate
< prefix example
< presented
< pretty
< previous
< previous slide
< previous video
< prime
< prime dot
< printed
< problem
< procedure
< produce
< production nonterminal
< program compiler
< program example
< program optimization
< program point
< programmer
< project
< property
< provable
< punctuation
< purpose
< push
< question
< range
< read int
< read token
< reading
< ready
< real
< reason
< recall
< recognizing viable prefix
< record activation
< recover
< recursive descent algorithm
< recursive descent parsing
< recursive function
< reduce
< reduce input
< reduce move
< reduced move
< reduction
< referred
< register
< register assignment
< register interference graph
< regular
< regular expression
< regular language
< relationship
< remember
< remind
< repeat
< replace
< replacing
< report
< representation
< required
< requires
< resource
< rest
< result
< return address
< return type
< reverse
< review
< rewrite
< rid
< rightmost derivation
< role
< root
< rule type
< running
< runtime
< save
< scan
< scope
< second
< selftype
< selftypes
< semantic analysis
< semantics
< sense
< sentence
< separate
< sequence
< series
< set string
< shift input
< shift move
< shift reduce
< shift reduced
< short
< short video
< shouldn
< showing
< side production
< sigma
< sign
< simple example
< simple language
< simple lr
< simplest
< simply
< single
< situation
< size
< slide ago
< slr parsing
< small
< solution
< solve
< sophisticated
< sound
< space character
< special
< specification
< spill
< stack content
< stack machine
< stack start
< stack time
< standard
< start state
< started
< starting
< state automaton
< state shift
< state stack
< state start
< static type system
< static typing
< statically
< stopandcopy garbage
< store
< store variable
< straightforward
< string hand side
< string interested
< string start symbol
< string token
< stuck
< substring
< suggests
< sum
< summarize
< supposed
< sure
< switch color
< symbol nonterminal
< syntax error
< system
< table
< talk bit
< talk first
< talked
< target
< technical
< template
< temporary
< terminal
< terminal symbol
< terminates
< thinking
< third
< three
< today
< token class
< token input
< token valid
< top stack
< topic
< transition
< translation
< traversal
< tree
< tree expression
< true
< turn
< type checking
< type checking rule
< type int
< type io
< type object
< type rule
< type system
< typed
< typically
< typing rule
< ugly
< understanding
< union
< unique
< unreachable
< usual
< valid invalid
< variable reference
< variation
< vary
< version
< vertical
< video code generation
< video continue discussion
< video discussion
< video introduction
< video overview
< video start
< video talk type
< video talked
< video talking
< video wrap
< void
< walk
< wan
< wanted
< white space character
< wind
< won
< word
< working
< worry
< worth
< wrap
< writing
< written
< year
---
> abstract syntax tree
> acceptance
> accepting state
> final state
> access link
> action
> activation record
> activation tree
> actual parameter
> acyclic call string
> acyclic path
> acyclic test
> ada
> address
> address descriptor
> address space
> advancing edge
> affine array access
> affine expression
> affine partitioning
> affine space partition
> affine transformation
> aho-corasick algorithm
> algebraic identities
> alias
> alignment
> allocation, of memory
> alpha
> alphabet
> ambiguous grammar
> amdahl's law
> analysis
> ancestor
> annotated parse tree
> anticipated expression
> antidependence
> antisymmetry
> antlr
> architecture
> arithmetic expression
> array
> array contraction
> ascii
> assembler
> assembly language
> associativity
> atom
> attribute
> attribute grammar
> augmented grammar
> auto-increment
> automaton
> available expression
> back edge
> back end
> backpatching
> backus-naur form
> backward flow
> baker, h. g. jr.
> baker's algorithm
> base address
> base register
> basic block
> basic type
> bdd
> bddbddb
> best-fit
> big-oh
> binary alphabet
> binary decision diagram
> binary translation
> binning, of chunks
> bison
> block
> block structure
> blocking
> bnf
> body
> body region
> boolean expression
> bottom element
> bottom-up parser
> boundary condition
> boundary tag
> bounds checking
> branch
> branch-and-bound
> break-statement
> buffer
> buffer overflow
> bus
> bytecode
> c
> cache
> cache interference
> call
> call graph
> call site
> call string
> call-by-name
> call-by-reference
> call-by-value
> calling sequence
> canonical derivation
> canonical lr parser
> canonical lr(1) set of items
> canonical lr(0) set of items
> case sensitivity
> cfg
> character class
> cheney's algorithm
> child
> chomsky normal form
> chunk
> circular dependency
> cisc
> class
> class variable
> clock
> cloning
> closure
> closure, of transfer functions
> coalescing, of chunks
> cocke-younger-kasami algorithm
> code generation
> code motion
> code optimization
> code scheduling
> coercion
> coherent cache protocol
> coloring
> column-major order
> comment
> common subexpression
> communication
> commutativity
> compile time
> complex instruction-set computer
> composition
> computer architecture
> concatenation
> concurrent garbage collection
> conditional jump
> configuration
> conflict
> conservative data-flow analysis
> constant
> constant folding
> constant propagation
> constraint
> context sensitivity
> context-free grammar
> context-free language
> context-sensitive analysis
> contiguous evaluation
> continue-statement
> control equivalence
> control flow
> control link
> control-dependence constraint
> control-flow equation
> convex polyhedron
> copy propagation
> copy statement
> copying garbage collector
> c++
> critical cycle
> critical edge
> critical path
> cross edge
> cup
> cutset
> cyclic garbage
> cyk algorithm
> dag
> dangling else
> dangling pointer
> data abstraction
> data dependence
> data locality
> data reuse
> data space
> data-de\-pen\-dence graph
> data-flow analysis
> data-flow analysis framework
> datalog
> datalog program
> dead code
> dead state
> dead variable
> deallocation, of memory
> declaration
> declarative language
> decode
> def
> definition
> definition, of a variable
> dependency graph
> depth, of a flow graph
> depth-first order
> depth-first search
> depth-first spanning tree
> dereferencing
> derivation
> descendant
> deterministic finite automaton
> dfa
> diophantine equation
> directed acyclic graph
> direct-mapped cache
> display
> distributive framework
> distributivity
> do-across loop
> do-all loop
> domain, of a data-flow analysis
> domain, of a relation
> dominator
> dominator tree
> downward code motion
> dynamic access
> dynamic loading
> dynamic policy
> dynamic programming
> dynamic ram
> dynamic scheduler
> dynamic scope
> dynamic storage
> earliest expression
> edb
> edge
> empty string
> entry node
> environment
> epilog
> epsilon
> epsilon-free grammar
> epsilon-production
> eqn
> equivalence-based analysis
> error correction
> error production
> error recovery
> ershov, a. p
> ershov number
> euclidean algorithm
> execution path
> exit block
> exit node
> expression
> extensional database predicate
> fall-through code
> farkas' lemma
> fetch
> field
> field load
> field store
> fifth-generation language
> final state
> finite automaton
> first
> first-fit
> first-generation language
> firstpos
> fission
> fixedpoint
> flex
> floating garbage
> flow graph
> flow sensitivity
> follow
> followpos
> formal parameter
> fortran
> fortran h
> forward flow
> fourier-motzkin algorithm
> fourth-generation language
> fragmentation
> framework
> free chunk
> free list
> free state
> front end
> frontier
> full redundancy
> fully permutable loops
> fully ranked matrix
> function
> function call
> function type
> functional language
> fusion
> garbage collection
> gcd
> gen
> generational garbage collection
> gen-kill form
> global code optimization
> global variable
> gnu
> goto
> grammar
> grammar symbol
> granularity
> granularity, of parallelism
> graph
> graph coloring
> greatest common divisor
> greatest lower bound
> ground atom
> group reuse
> handle
> hardware register renaming
> hardware synthesis
> head
> header
> heap
> height, of a semilattice
> hierarchical reduction
> hierarchical time
> higher-order function
> hole
> idb
> ideal solution, to a data-flow problem
> idempotence
> identifier
> identity function
> if-statement
> immediate dominator
> imperative language
> inclusion-based analysis
> increment instruction
> incremental evaluation
> incremental garbage collection
> incremental translation
> independent variables test
> index
> indexed address
> indirect address
> indirect triples
> induction variable
> infix expression
> inheritance
> inherited attribute
> initial state
> initialization
> initiation interval
> inlining
> input buffering
> instruction pipeline
> integer linear programming
> intensional database predicate
> interleaving
> intermediate code
> interpreter
> interprocedural analysis
> interrupt
> intersection
> intraprocedural analysis
> item
> iteration space
> iterative data-flow algorithm
> java
> java virtual machine
> jflex
> join
> jump
> jumping code
> just-in-time compilation
> jvm
> kernel
> kernel item
> keyword
> kill
> kleene closure
> knuth-morris-pratt algorithm
> label
> lalr parser
> language
> lastpos
> latest expression
> lattice
> lattice diagram
> l-attributed definition
> law
> lazy code motion
> lea
> leader
> leaf
> leaf region
> least upper bound
> left side
> left-associativity
> left-factoring
> leftmost derivation
> left-recursion
> left-sentential form
> lewis, p. m. ii
> lex
> lexeme
> lexical analyzer
> lexical error
> lexical scope
> lexicographic order
> linear programming
> list scheduling
> literal
> live variable
> ll grammar
> ll parser
> llgen
> load instruction
> loader
> local code optimization
> locality
> location
> logical address
> logical error
> lookahead
> lookahead-lr parser
> loop
> loop fission
> loop fusion
> loop nest
> loop region
> loop reversal
> loop unrolling
> loop-invariant expression
> loop-residue test
> lr(0) automaton
> lr parser
> l-value
> machine language
> macro
> main attribute
> mark-and-compact
> mark-and-sweep
> marker nonterminal
> matrix multiplication
> maximum fixedpoint
> mcnaughton-yamada-thompson algorithm
> meet
> meet-over-paths solution
> memoization
> memory
> memory hierarchy
> memory leak
> message-passing machine
> meta
> metal
> method
> procedure,
> virtual method
> method call
> call
> method invocation
> mgu
> minimization, of states
> ml
> modular resource-reservation table
> modular variable expansion
> monotone framework
> mop
> most general unifier
> multiprocessor
> mutator
> naa
> nac
> name
> narrowing
> natural loop
> neighborhood compaction
> neliac
> nested procedure declarations
> next-fit
> nfa
> node
> node merging
> nondeterministic finite automaton
> nonreducible flow graph
> nonterminal
> nonuniform memory access
> null space
> nullable
> nullity
> numa
> object code
> object creation
> object ownership
> object program
> object sensitivity
> object-oriented language
> offset
> on-the-fly generation
> optimization
> ordered bdd
> output dependence
> overloading
> panic-mode garbage collection
> panic-mode recovery
> panini
> parafrase
> parallel garbage collection
> parallelism
> parameter
> parameter passing
> parametric polymorphism
> parent
> parse tree
> parser
> parser generator
> parser state
> partial garbage collection
> partial order
> partial redundancy elimination
> partially dead variable
> partially ordered set
> pass
> path
> pattern
> pattern matching, of trees
> pause time
> p-code
> pdg
> peephole optimization
> permuation
> pfc
> phase
> phoenix
> phrase-level recovery
> physical address
> physical memory
> pipeline
> pipelining,
> pointer
> pointer analysis
> poison bit
> polyhedron
> polymorphism
> poset
> positive closure
> postdominator
> postfix expression
> postfix translation scheme
> postorder traversal
> postponable expression
> power set
> pre
> precedence
> predecessor
> predicate
> predicated execution
> predictive parser
> prefetch
> prefetching
> prefix
> prefix expression
> preorder traversal
> preprocessor
> prioritized topological order
> private
> privatizable variable
> procedure
> procedure call
> procedure parameter
> processor space
> product lattice
> production
> program-dep\-en\-dence graph
> programming language
> projection
> prolog
> protected
> pseudoregister
> ptran
> public
> purify
> quadruple
> quicksort
> rank, of a matrix
> reaching definitions
> read barrier
> record
> recursive descent
> recursive type
> recursive-descent parser
> reduced instruction-set computer
> reduce-reduce conflict
> reducible flow graph
> reduction
> reduction in strength
> reference
> reference count
> reference variable
> reflection
> reflexivity
> region
> region-based allocation
> register
> register allocation
> register assignment
> register descriptor
> register pair
> register renaming
> regular definition
> regular expression
> re-indexing
> relation
> relative address
> remembered set
> reserved word
> resource constraint
> resource-reservation table
> retreating edge
> return
> return value
> reuse
> reversal
> right side
> right-associativity
> rightmost derivation
> right-sentential form
> risc
> root
> root set
> rotating register file
> row
> row-major order
> rule
> run time
> run-time environment
> run-time stack
> r-value
> safety
> s-attributed definition
> scaling
> scanned state
> scanning
> scc
> scheduling
> scope
> scripting language
> sdd
> sdt
> sdv
> secondary storage
> second-generation language
> self reuse
> semantic analysis
> semantic error
> semantic rule
> semantics
> semilattice
> sensitivity
> sentence
> sentential form
> sentinel
> set associativity
> set of items
> shift-reduce conflict
> shift-reduce parser
> short-circuiting
> short-pause garbage collection
> side effect
> signature
> simd
> simple syntax-directed definition
> simulation
> single instruction, multiple data
> single production
> single-program multiple data
> skewing
> slam
> slr parser
> smp
> software pipelining
> software productivity
> software vulnerability
> sor
> sound type system
> source language
> space
> space-partition constraint
> spatial locality
> spatial reuse
> speculative execution
> spilling, of registers
> spmd
> sql
> sql injection
> ssa
> stable set
> stack
> stack machine
> stack pointer
> start state
> start symbol
> state
> state (of the program store)
> statement
> static access
> static allocation
> static checking
> static policy
> static ram
> static scope
> scope
> static single-assignment form
> static storage
> steady state
> storage
> storage layout
> storage-related dependence
> store instruction
> stratified datalog program
> strength reduction
> string
> strongly connected component
> strongly typed language
> structure
> subgoal
> subsequence
> subset construction
> substring
> successive over-relaxation
> successor
> suffix
> summary-based analysis
> super control-flow graph
> superscalar machine
> switch-statement
> symbol table
> symbolic analysis
> symbolic constant
> symbolic map
> symmetric multiprocessor
> synchronization
> syntax
> syntax analysis
> syntax error
> syntax tree
> syntax-directed definition
> syntax-directed translation
> synthesis
> synthesized attribute
> table
> transition table
> tail recursion
> target code
> target language
> target set
> task parallelism
> temporal locality
> temporal reuse
> terminal
> tex
> third-generation language
> three-address code
> tick
> tiling
> time-partition constraint
> tmg
> token
> top element
> top-down parser
> topological order
> trace-based garbage collection
> train algorithm
> transfer barrier
> transfer function
> transition
> transition diagram
> transition function
> transition table
> transitivity
> traversal
> tree
> tree rewriting
> triple
> true dependence
> t1-t2 reduction
> tuple
> type
> type checking
> type conversion
> type equivalence
> type expression
> type inference
> type safety
> type synthesis
> type variable
> uncol
> undef
> unification
> union
> unreachable code
> unreached state
> unsafe datalog rule
> unsafe language
> unscanned state
> upward code motion
> usage count
> use
> use before definition
> used expression
> used variable
> valid item
> value
> value-number
> variable
> variable expansion
> variable-length data
> vector machine
> very-busy expression
> very-long instruction word
> viable prefix
> virtual machine
> virtual memory
> virtual method
> vliw
> von neumann language
> vulnerability, of software
> wavefronting
> weight, of a path
> while-statement
> white space
> widening
> width, of a type
> wilderness chunk
> write barrier
> yacc
> yield
