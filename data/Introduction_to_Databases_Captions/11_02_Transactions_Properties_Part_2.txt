Now, you might wonder how the database system could possibly guarantee this level of consistency while still inter-leading operation. | 
It uses protocols that are based on locking portions of the database. | 
Now we're not going to describe the implementation, because implementation aspects are not the focus of this course. | 
What you need to know from a user's application perspective is really the properties that are being guaranteed. | 
Now with the formal notion of a let's go back and look at the examples from the previous video that motivated the problems we could get into with concurrent access. | 
The first one was the example where two separate clients were updating Standford's enrollment. | 
Let's just call one of them T1. | 
It's not a transaction. | 
And the other T2. | 
So when we run thing is against the system and serializability is guaranteed, then we will have a behavior that is at least equivalent to either T1 followed by T2, or T2 followed by T1. | 
So, in this case, when we start with our enrollment of 15,000, either execution will correctly have a final enrollment of 17,500 solving our concurrency problems. | 
Here's our second example. | 
In this case the first client was modifying the major of student 123 in the apply table and the second was modifying the decision. | 
And we saw that if we allowed these to run in an interleaved fashion, it would be possible that only one of the two changes would be made. | 
Again, with serializability we're going to get behavior that guarantees it is equivalent to either T1 and then T2, or T2 and then T1. | 
And in both cases, both changes will be reflected in the database which is what we would like. | 
The next example was the one where we were looking at the Apply and the Student table, and we were modifying the Apply table based on the GPA in the Student table, and simultaneously modifying that GPA. | 
So again if these are issued as two transactions, we'll have either T1 followed by T2 or T2 followed by T1. | 
Or at least we will have behavior that is equivalent to that. | 
Now this case is a bit interesting because either of these does result in a consistent state of the database. | 
In the first case, we'll update all the decision records before the GPAs are modified for anyone, and in the second case, will update the apply records after the GPAs have been modified. | 
The interesting thing here is that the order does matter in this case. | 
Now, the database systems only guarantees serializability. | 
They guarantee that the behavior will be equivalent to some sequential order but they don't guarantee the exact sequential order if the transactions are being issued at the same time. | 
So if it's important to get, say, T1 before T2, that would actually have to be coded as part of the application. | 
And our last example was the case where we had the Apply table, the Archive table, and we were moving records from one table to another in one of our clients, and the other client was counting the tuples. | 
And again, so T1 and T2, they're issued as transactions. | 
The system guarantees that we'll either move all the tuples first and then count them, or will count the tuples and then move them. | 
Now, again, here's a case where the order makes a difference, but if we care specifically about the order, that would have to be coded as part as the application. | 
OK, so we've finished our first of the four ACID properties. | 
The other three will actually be quite a bit quicker to talk about. | 
Let's talk now about durability. | 
And we only need to look at one client to understand what's going on. | 
So let's say that we have our client, and the client has issuing a sequence of transactions to the database. | 
And each transaction again is a sequence of statements. | 
And finally at the end of the transaction there is a commit. | 
So what durability guarantees for us is that if there is a system crash after a transaction commits, then all effects of that transaction will remain in the database. | 
So, specifically, if at a later point in time after this occurs, there's a failure for whatever reason, the client can rest assured that the effects of this transaction are in the database, and when the system comes back up, they will still be in there. | 
So you may be wondering how it's possible to make this guarantee since database systems move data between disc and memory and a crash could occur at anytime. | 
They're actually fairly complicated protocols that are used and they're based on the concept of logging. | 
But once again we're not gonna talk about the implementation details. | 
What's important from the user or application perspective is the properties that are guaranteed. | 
2 properties down. | 
Now let's talk about atomicity. | 
again we'll only look at one client who's issuing a sequence of transactions to the database. | 
And let's look at transaction T2 which itself is a sequence of statements followed by commit. | 
The case that atomicity deals with is the case where there's actually a crash or a failure during the execution of the transaction, before it's been committed. | 
What the property tells us is that even in the presence of system crashes, every transaction is always executed either all or nothing. | 
on the database. | 
So in other words, if we have each of our transactions running, it's not possible in a system crash to, say, have executed on the database a couple of statements but not the rest of the transaction. | 
Now once again, you might be wondering how this is implemented. | 
It also uses a log-in mechanism and specifically when the system recovers from a crash, there is a process by which partial effects of transactions that were underway at the time of the crash, are undone. | 
Now applications do need to be somewhat aware of this process. | 
So when an application submits a transaction to the database, it's possible that it will get back an error because there was in fact a crash during the execution of the transaction, and then the system is restarted. | 
In that case the application does have the guarantee that none of the effects of the transaction were reflected in the database, but it will need to restart the transaction. | 
