So the basic of idea of what we're going to do is design by decomposition, specifically, we're going to do what we did at the very beginning of this example, which is start by creating mega-relations that just contain attributes for everything that we want to represent in our database, then we're going to decompose those mega relations into smaller ones that are better, but still capture the same information. | 
And most importantly we can do this decomposition automatically. | 
So how does automatic decomposition work? | 
In addition to the mega relations, we're going to specify formally, properties of the data.The system is going to use the properties to decompose the relations, and then it's going to guarantee that the final set of relations satisfy what's called a normal form. | 
And we'll be formalizing all of this. | 
But the basic idea behind normal forms is that they don't have any of those anomalies that I showed and they don't lose any information. | 
So specifically for specification of properties, we're going to begin by looking at something called functional dependencies. | 
And once we specify functional dependencies, the system will generate relations that are in what's called Boyse Codd normal form. | 
And Boyse and Codd by the way were two early pioneers in relational databases in general. | 
Then we're going to look at another type of specification called multi valued dependencies which will add to functional dependencies and when we have both functional and multi valued dependencies, then we can have what's called fourth normal form, and again, that would be relations that are generated by the system that satisfy the normal form. | 
Boyce-Codd normal form is stricter than fourth normal form. | 
Specifically if we make a big Venn diagram here of all the relational designs that satisfied Boyce-Codd Normal Form, which by the way is very often abbreviated BCNF, then that contains all of the relations that satisfy fourth normal form, normally abbreviated 4NF. | 
So every relation that's in fourth normal form is also in Boyce-Codd normal form, but not vice versa. | 
You might be wondering what happened to first, second and third, normal forms. | 
So first normal form is pretty much just a specification that relations are real relations with atomic values in each cell. | 
Second normal form is specifying something about the way relations are structured with respect to their keys. | 
Neither of those is discussed very much anymore. | 
Third normal form is a slight weakening of Boyce-Codd normal form and sometimes people do like to talk about third normal form. | 
So you can think of third normal form as a little bit of a even bigger circle here. | 
We're not going to cover third normal form in this video because Boyce-Codd normal form is the most common normal form used if we have functional dependencies only, and fourth normal form if we have functional and multivalued dependencies. | 
So what's going to happen next is I'm going to give some examples to motivate these four concepts: functional dependencies, Boyce-Codd normal form, multivalued dependencies normal form, and then later videos will go into each one in much greater depth. | 
So let me just give the general idea of functional dependencies and Boyce-Codd Normal Form. | 
And we'll use a very simple for example, an abbreviated version of our apply relation that has students' social security numbers, the student's name and their colleges that the student is applying to. | 
Even this small relation actually has redundancy and update and deletion anomalies. | 
Specifically, let's say that our student, 123Ann, applies to 7 colleges. | 
Then there will be 7 tuples and there will be 7 instances where we know that a student with the social security number 123 is named Ann. | 
Specifically, we're going to store for every student the name and social security number pair once for each college that they apply to. | 
So now let me explain what a functional dependency is and then we'll see how functional dependencies are used to recognize when we have a bad design like this one, and to see how we can fix it. | 
A functional dependency, in this case from social security number to name, and we're saying social security number functionally determines the student name says that the same social security number always has the same name. | 
In other words, every time we see 123, we're going to see Ann. | 
Now it doesn't necessarily go in the other direction. | 
It might not be that whenever we see Ann, it's 123, but whenever we see 123, it is Ann. | 
And so what we'd like to do is store that relationship just one time. | 
One time say that for 123, the name is Ann. | 
Now what Boyce Codd Normal Form says is that whenever we have one of these functional dependencies, then the left hand side of that functional dependency must be a key. | 
And think about what that's saying. | 
Remember a key says that we have just one tupple with each value for that attribute. | 
So if we have say social security number to name as a functional dependency and we satisfy Boyce-Codd Normal Form, then we're going to say that social security number has to be a key in our relation, and we'll only have one tupple for each social security number. | 
Specifically, we can go back to our original relation. | 
We have this functional dependency social security number here is not a key, right? | 
So then we know that this is not in Boyce-Codd Normal Form. | 
So we're going to use functional dependencies to help us decompose our relation so that the decomposed relations are in Boyce-Codd Normal Form. | 
And here's what would happen in this example. | 
Our functional dependency would tell us to pull out the social security number and student name into its own relation where the social security number is a key and then we have just one time for each social security number that students name, and then separately we'll have the information about the students and which colleges they applied to. | 
Again, we'll completely formalize this whole idea, the definition of functional dependencies, their properties, the normal form, and how we do the decomposition in a later video. | 
