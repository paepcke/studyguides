So back to the basic form of our with recursive statement in order to introduce a different topic, which is the topic of mutual recursion. | 
Mutual recursion, as I alluded to in the previous video, is the case where one of our recursively defined relations does not refer to itself but rather to a different recursively defined relation. | 
And that one refers back to the first one. | 
Or we could even have a loop of three or four or more. | 
So, the idea is that we can't look at these individually to see the recursion but together they are recursive and they have to kind of be computed in tandem. | 
So, the example I'm going to use here is what's known as hubs and authorities. | 
Hubs and authorities was an algorithm for web searching actually. | 
For annotating web nodes for the purposes of searching. | 
Was developed around the same time as Google's page rank, I guess we can see which one won out. | 
But hubs and authorities actually quite interesting just in what it does. | 
Let me go ahead and define the meaning of Hudson authorities, and then show how mutual recursion in SQL can be used to compute the Hudson authorities in a database that contains a link, a structure, a graph basically. | 
So here's a little graph and we're going to assume that each node has a number, say, associated with it, and that we have a relation called "link", that just tells us the edges of the graph, so the source node and the destination node. | 
So in a graph, we're going to designate some of the nodes as hub nodes and some of the nodes as authority nodes. | 
And we are going to define a hub node to be a node that points to at least some number, let's say three authority nodes. | 
And similarly, we're going to say an authority node is a node that's pointed to by, let's say at least three again, hub notes. | 
And by the way this numbers three and three don't have to be the same. | 
And another thing I wanted to mention is in a graph say representing the web, we wouldn't expect a large fraction of the notes to be hubs in authorities, many would be normal notes. | 
But, again, this just for illustrative purposes, but it also serves to teach you about the hubs in authorities concept, which is kind of interesting. | 
Now you can see already how mutual recursion is going to fit into the picture. | 
But how are we gonna get started? | 
The only way you can actually get started is to have some nodes that are predesignated as hubs and authorities. | 
For example, if we predesignated as authorities these three middle nodes here, then we could compute the fact that node one is a hub. | 
So, we'll also assume that we have two more relations in our database. | 
One of them gives us a set of notes predesignated as hugs and the other a set of notes predesignated as authorities. | 
And our job is to write a query that computes all of the hub and authority nodes based on this mutually recursive definition here. | 
So here is the query that does it. | 
By the way, you have certainly noticed that I'm not doing a live demo of the recursive queries in this particular video. | 
Nonlinear recursion is not supported in the Postgres system, and it's also not part of thAQL standard. | 
Mutual recursion in limited forms is part of the SQL standard but it's also currently not supported in Postgres, so I've used the nice interface is here to get the coloring of our queries. | 
But these queries currently don't run on the systems that we're using. | 
OK, so back to our actual query here. | 
So, this is a query to compute hubs and authorities given that we have a starting set of hub nodes and a starting set of authority nodes. | 
And, then we have the link relation that gives us the structure of our graph. | 
So we're going to compute to relations. | 
The hub relations with the nodes that are hubs. | 
The authorities relation of the nodes that are authorities, and they are going to have mutual recursion between them. | 
So, let's take a look first at the hubs and we'll see that the structure of the queries for hubs and authorities is very, very similar. | 
So the base case for the hubs is that the nodes that are in the hub start relation are in the hub relation, of course. | 
And then the recursive query here is a little bit complex. | 
So what we're going to find is links, elements in our link relation, where the destination is an authority and so we're going to find all of the sources that point to an authority. | 
We're going to group by the source, so we consider each node, one at a time. | 
And then we count how many times it appears in the link pointing to an authority. | 
So, this is going to give us a nodes that point to greater than or equal to three authorities which was our definition of hubs. | 
Now here of course we're referring to authority which itself is a recursively defined relation. | 
The authority relation is very similar, as I said we start with our base case of adding nodes that are in the authority start relation. | 
And, then we consider destinations instead of sources in our link relation such that there are at least three sources that are hubs and that's what we've got down here. | 
So, this is going to give us elements that are pointed to by greater than or equal to three hubs. | 
And here of course we are using hub, which is also a recursively defined relation. | 
So you can think of these two as working in tandem. | 
You can think of the system as sort of iteratively adding to the hubs and the authorities until there's nothing more to add to either one. | 
Now one thing that this definition of hubs of authorities and this computation allows, is for a node to be both a hub and an authority. | 
And there is nothing wrong with that if the structure of the graph yields that result. | 
But, let's suppose we don't want nodes to be allowed to be both hubs and authorities. | 
We want every node to be either one or the other. | 
That will require us to modify our query. | 
To not add nodes to become hubs if they're already authorities. | 
Or to have nodes become authorities if they're already hubs. | 
So let's go ahead and modify the query to incorporate that additional constraint. | 
So, here's the query and, by the way, just a reminder that you can download these queries from our website even though you can't run them at this point in time. | 
The difference in this query from the previous one is one additional condition in the definition of hubs right here, saying I'm not going to add a node, a source node to the hubs, if it's already in the authorities and similarly I've added one more condition here in authorities that I'm not going to add a node to authorities if it's already a hub. | 
Now let's suppose we have the following graph structure. | 
We have a node here that hasn't been labeled as a hub or authority yet. | 
And let's suppose that this node is pointed to by three nodes that have already been designated as hub nodes. | 
And furthermore, this node points to three nodes that have already been designated as authorities. | 
So by our definition, this node could be a hub because it points to three authorities and it could also be an authority because it is pointed to by three hubs. | 
But the query we've given now is not going to allow us to label this node as both a hub and authority. | 
And just to be clear in the previous query we would have put this node in both the hub relation and the authority relation but, now, we're not going to be able to do that because of these conditions right down here. | 
So, actually, whether this node ends up as a hub or an authority depends on effectively which one of these arms of our with statement gets executed first. | 
If we first consider the possibility of the node being a hub, then it will be put in the hub relation and then it won't be allowed to be put in the authority relation. | 
On the other hand, if we first make an authority, then when we look for computing the hub relation, it wouldn't be allowed to be a hub. | 
So you can think of this as a sort of non-deterministic behavior or if you're into theory there's a non-unique fixed point of the recursion, and this is considered as a not good thing. | 
Generally, database people, when they run queries, would like to have one answer all the time. | 
They like to have deterministic answers for their queries, so actually this type of mutual recursion is not allowed in the SQL standard and the real crux of the problem here is that one recursively defined relation is depending negatively on another one. | 
So this negative dependence is what causes the problem. | 
And actually we can have a negative dependence even without mutual recursion. | 
We could define a relation that sort of depends negatively on itself in a sub-query and that wouldn't be allowed either. | 
So that completes the example of hubs authorities and again, what we're trying to show first of all, is mutual recursion which can be quite powerful. | 
And, second of all, the restriction that we can't have negative subqueries across recursively defined relations. | 
The last thing that I wanted to mention in this video, it's not in the title of the video since we are focusing mostly on nonlinear and mutual recursion is recursion with aggregation. | 
And let me just show a simple abstract example. | 
So we have a relation P that just contains one attribute we can assume that it's integers. | 
And we're going to try in our with recursive statement to computer recursively define relation called R that contains the tuples in P, together with the sum of the values in the attribute of P, I will just write that as sum of P. So here's how we write it in SQL. | 
We have our base case which is that the tuples in P are also in R. And then we do our UNION of the recursive part which says, and also in R I want to have the sum of the tuples in R. So let's say that P starts out with two tuples, the values one and two. | 
So what does the query compute for R? | 
Well certainly one and two are in R based on the first part here. | 
And then based on the second part then in the first iteration R should also contain the sum of R, which is 3. | 
Except as soon as we put three in the sum of R isn't three anymore, the sum of R is six. | 
So shall we cross out the 3 in and put six there? | 
But then now the sum of R has become six, seven, eight, nine. | 
You can see the problem. | 
There's no good definition for what R should contain based on this recursion. | 
And for that reason actually, recursion with aggregation is disallowed in the SQL standard and isn't supported by any system. | 
So, to summarize about both of our videos about recursion, SQL has introduced recursion into the standard as part of the WITH statement. | 
Whether the keyword RECURSIVE goes with the WITH, or with recursively defined relations is a bit inconsistent, but in any case, the basic idea is the same. | 
When we have this statement, we can write queries that refer to the relation that's being defined. | 
And we can also have mutual recursions between the queries that are defined in the with statement, and finally the result is a running of the final query which might involve the recursively defined relations. | 
Adding recursion to SQL does strictly extend it's expressiveness. | 
There are queries that can't be written without recursion. | 
They usually involve some type of unbounded computation, for example, computing any number of flights or any depths of ancestors. | 
Usually there's a transitive closure flavor to those queries. | 
Without recursion the iteration involved in computing recursively defined relation has to be written outside of the database, has to be written in code in some fashion. | 
Now we saw that the basic functionality of SQL recursion is linear recursion, where we only have one instance of the recursively defined relation in the query defining the relation. | 
We can write a lot with linear recursion. | 
It's very expressive and can express most of the natural queries we might want to do in recursive SQL. | 
But, there is extended functionality, there's non-linear recursion. | 
We saw that non-linear recursion can lead to nicer looking queries and can converge faster but is actually more difficult to implement efficiently. | 
And then there's mutual recursion where R1 here might be defined in terms of R2 which itself is defined in terms of R1 and we saw one interesting example where we'd like to use mutual recursion where it was appropriate. | 
Finally in terms of what was disallowed recursive sub queries; by that I mean referencing recursively defined relation in sub query, is actually in the SQL standard not supported by the postgres system that we were using. | 
When a reference in a sub query to a recursively defined relation is negative, sort of like a not exist or not and that is disallowed by the SQL standard and we saw that that can lead to sort of, non-obvious behavior, non-deterministic final results. | 
And finally, aggregation causes complication as well in recursion and is disallowed, too. | 
The features that are disallowed really don't come up that often naturally and once again, and let me just emphasize that the basic functionality of linear recursion does allow one to express a lot of really nice queries and does extend the expressiveness of the SQL language. | 
