10.469
slide
Compilers L1 AAAAAA an
The graph  coloring here is like that we discussed in the previous video doesn&#39;t 

21.46
slide
Spilling What happens if the graph coloring heuristic fails to find a coloring In this case we hold all values in registers Some values are spilled to memory ex mm
always succeed in coloring an arbitrary graph. And it may well get stuck and not be able to find a coloring. And so in that case the only conclusion we can reach is that we can&#39;t hold all the values that we&#39;d like to register. We have more temporary values and we have registers to hold them. And those temporary values have to live somewhere so where should they live? Well, they&#39;re going to have to live in memory. That&#39;s the only other kind of stories that we have. And so we&#39;re going 

45.369
slide
Spilling What if all nodes have k or more neighbors ex Aiken
to pick some values and spill them into memory. The ideas that we have, the 

49.97
slide
Spilling What if all nodes haye k or more neighbors Example Try to find a 3 coloring ofthe RIG 0 b f
picture in your mind should be. A bucket and it can hold a fixed amount of stuff. Those are the registers and when it gets too full, some of the stuff spills over and, and ends up some place else. Now, when does the graph coloring here do get 

63.9
slide
Spilling get stuck Max Am
stuck? Well, this only situation which we won&#39;t be able to make progress as if all the notes have k or more neighbors. So, let&#39;s take a look at our favorite register interference graph when we will be using at our examples and now, let&#39;s say that our, the machine we want to use only has three registers and so we, 

81.69
slide
Spilling Pick a node as a candidate for spilling A spilled value in memory Assume f is chosen f Alex Men
instead of finding a 4-coloring of this graph, we need to find a 3-coloring. So let&#39;s think about how to find the three coloring of this graph. If we apply the heuristic, we&#39;ll remove A from the graph but then we&#39;re going to get stuck. Because once you take A out of the graph and it&#39;s edge is out and every node that&#39;s left has more than has three or more neighbors as at least three neighbors. So, 

104.06
slide
Spilling Remove f and continue the simplification Simplification now succeeds b d e c b Mex mm
there&#39;s no node that we can delete from the graph and be guaranteed to be able to find the coloring for it with the heuristic that we discussed in the previous video. So, in this situation, what we&#39;re going to do is we&#39;re going to pick and know that there is a candidate for spilling. This is a know that we or a temporary that we are 

125.4
slide
Spilling Eventually we must assign a color to f We hope that among the 4 neighbors of f we use less than 3 colors optimistic coloring
probably or we think we may have to assign into a memory location rather than to our 

130.439
writing

register and let is assume for the sake of this example that we pick f and we talk later about how to choose a, the know to spill, there&#39;s a number of different ways to, to chose the particular know to spill but for the illustration of this example, it doesn&#39;t matter how pick, we just have to pick one to remove from the. Graph. As were going to say, we&#39;re going to remove, that we going to spill F. So what we&#39;ll do then is we&#39;ll remove f from the graph just like before and then we&#39;ll continue with our simplification and this will now succeed because once we move F from the graph we can see that all the nodes well, actually several of the nodes have fewer than three neighbors and so B, C, and D. Sorry, B and D both only have two neighbors when [inaudible] E and C will only have one neighbor each and so clearly coloring will now succeed and here&#39;s one order that we&#39;ll succeed with this reduced graph. After we decide to spill f and we successfully color the sub-graph, now we 

192.17
slide
Spilling If optimistic coloring fails we spill f Allocate a memory location forf Typically in the current stack frame Call this address fa Mex mm
have to try to assign a color to f and it could be, we could get lucky and discover that even though f had more than there neighbors or three or more neighbors when we remove it from the graph, it could be that when we go to construct the coloring for the sub-graph that. Those neighbors actually don&#39;t use all of the register. It could wind up being at all those neighbors, for example or assign to the same register and so there are plenty of registers left over to assign to f. And 

221.79
slide
Spilling If optimistic coloring fails we spill f Allocate a memory location forf Typically in the current stack frame Call this addressjg Before each operation that reads f insert f load fa After each operation that writes f insert store f fa ex mm
so, this is called optimistic coloring. So we pick a candidate for spilling. We tried 

226.79
slide
Spilling Original code Alex um
to color the sub-graph. Once we have a coloring for the sub-graph, now we see if we just get lucky. And are able to assign a register to F. In which case we can just 

236.26
slide
The code after spilling f f2 2 e store f2 fa
go ahead and continue the color of the rest of the graph as if nothing had 

240.489
slide
illing a b c The code after spillingf d1 3 load fa e d f1 f2 2 e bz d e e e 1 store f2 fa Alex um
happened. So in this case let&#39;s take a look what happens. We&#39;re going add F back into the graph. And. And look at all, and look at it&#39;s neighbors and we see that we have a neighbor that&#39;s using r1. We have a neighbor that&#39;s using r2 and we have a 

255.29
slide

neighbor that&#39;s using r2 and we have a neighbor that&#39;s using r3. And so on in this case, optimistic coloring will not work so in fact F had more than K 

264.849
slide

neighbors and after we color the sub-graph, it turns out that those neighbors are using all K. In this case three, all three of the register names. 

273.16
slide
Recompute liveness f2 2 e store f2 fa
And so F where there is no register left over for F and we&#39;re going to have to 

277.4
slide
Recompute liveness
actually spill it and store in memory. So, if optimistic coloring fails as it does in this example, then we spill f. So, what we&#39;re going to do is allocate the memory location for f and typically, what that means is that we&#39;ll allocate a position in 

292.56
slide
Recompute liveness my a b c d f1 3 load fa e d fl c d f1 f2 2 e 2 C f store f2 fa ex mm
the current stack frame. Let&#39;s call this address fa for the address of f. And then we&#39;re going to modify the control flow graph. We&#39;re going to change the code for that compiling. So, before each operation that reads f, we&#39;re going to insert a load 

310.22
slide
Recompute liveness my a b c d a f1 load fa e d 1 mg f2 Z e 2 CA store f2 fa ck N 6 7 f3 load fa C f3 b f3 c b
that loads from that address to current value of f into a temporary name. Okay, that makes sense because if the value is out of memory, then if we have an operation that needs to actually use the value. We&#39;re going to have to load it from a memory first then to the register. And similarly after each operation that writes 

329.8
slide
Spilling New liveness information is almost as before Note f has been split into three temporaries Alex mm
F, we&#39;re going to insert the store so we&#39;re going to save the current value of F 

334.43
writing

into it&#39;s location in memory. So, here is the original code from which we constructed the registry interference graph and notice that there are few references to f in here and we just highlight them, alright. So, we have a couple of reads, we have a right and so now, what are we going to do? So, here we had the use of F, the read of F in this statement and now we preceded that by a load. And notice that I&#39;ve given a new name here. I&#39;ve called this F1. And, that&#39;s because the different uses of F in the control flow graph don&#39;t all have to have the same temporary name. And actually it would be a good idea to separate them so 

374.889
slide
Spilling New liveness information is almost as before Note f has been split into three temporaries is live only Between a fi load fa and the next instruction Between a store fi fa and the preceding instr Alex mm
each distinct to use of F will get it&#39;s own name. So here we load the value of F and then it get to use in the statement. Here we have a right to f and so we store the current value of f and those argument to a different name, f2. So, that&#39;s temporary is computed here as going to be stored and it&#39;s called f2. And finally, the third use of f there&#39;s another load of f right here. Which is then used in this 

398.93
slide
Spilling New liveness information is almost as before Note f has been split into three temporaries is live only Between load fa and the next instruction Between a store fi fa and the preceding instr Spilling reduces the live range off And thus reduces its interferences Which results in fewer RIG neighbors my mm
computation here of b. Okay. So, that is the systematic way to modify the code to use f in storage. And now, we have to recompute the aliveness of f. And so, what 

414.52
slide
Spilling Some edges of the spilled node are removed In our case f still interferes only with c and d And the new RIG is u b f1 f3 f2
happens there. Well, here is the original aliveness information from which we computed the register interference graph, okay. And now notice that f is gone. We no longer use f in the programs so we can delete all the places where we mentioned that f was live and now we have the three new names, f1, f2, and f3. And we have to add in their aliveness information so it creates a new program points here where we 

441.35
slide
Spilling Additional spills might be required before a coloring is found The tricky part is deciding whatto spill But any choice is correct Possible heuristics Spill temporaries with most conflicts Spill temporaries with few definitions and uses Avoid spilling in inner loops
inserted statements. And of course, where we have a load of the current value of f 

447.289
writing

that value if live right before the use in the next statement. Here, we have the right of the current value of f and that&#39;s live right before the store and then here&#39;s another load of the current value of f which is live until the store, I&#39;m sorry, until the use in the next statement. Okay. And so, now notice here that f used to be live in many, many, many places in the, in the code. And now not only is f or the, the different versions of f live in fewer places also we&#39;ve distinguish them. So, it actually separate the different uses of f and so this will have their own nodes in their own set of interferences in the graph and they won&#39;t share them with the other users of f and that will actually also reduce the number of edges in the graph. To summarize the example on the previous slide, once we have decided that we are actually going to spill a temporary f, that means we&#39;re going to change the program where have loads and stores to the program and now we&#39;re going to have a different program and that&#39;s going to change our register allocation problems. We&#39;re going to have to recompute the aliveness of information, we&#39;re have to rebuild the restrain interference graph and then we&#39;re going to have to try again to color that block graph. Now, it turns out that this new aliveness information is almost the same as it was before. So, all the temporary names other than f are not much affected by the by the new statements that are added. There are a few program points where they might be live but I replaced they were alive before and they&#39;re still alive. And, F itself has changed fairly dramatically. It&#39;s like this information has changed really dramatically. Certainly the old name F is no longer used and so it&#39;s like this information goes away and then we&#39;ve also split F into three in this case three different temporaries. One for each of the different uses of F in the control flow graph. And I noticed that each of these new uses of F or these new versions of F is live in a very, very small area so a load. In this video, we are going to continue our discussion of as filling. For a load instruction The thing that were loading the temporary that we&#39;re loading fi is live only between the load and the next instruction where it&#39;s used and similarly for a store. It&#39;s score of a temporary fi is live only between the store itself and the proceeding instruction. The one they created fi. And the effective is, is to greatly reduce the live range of the spilled variable. So, whatever name we decide to spill by adding the load and stores right next to the places where those values are used We dramatically reduced the live range and in addition, as I mentioned in the previous live by splitting the name f into multiple different name, we also you know, avoid sharing. Those different liv e ranges between the different versions of F. So because the live range of F is reduced by spilling. It has fewer interferences in the new program than it did in the old program. And so what that means the particulars in the rebuild [inaudible] interference graph, F will have fewer neighbors. Some of the neighbors that it had before have gone away because it just live in fewer places. So if we look at the new register interference graph, we can see that among all the different versions of F. Remember that F has been split into three temporaries in this graph. We see that they only interfere with D and C. Whereas, before f have several other neighbors in the graph. And now, in fact this new graph is three tolerable. Of course it might be the case that we can&#39;t just spill one name. We might have to have just spill several different temporaries before the coloring is found. And, the tricky part is to siding what to spill. So, this is the hard decision that has to be made during restore allocation. Now any choice is correct. It&#39;s only a question of performance so you know some choices of spilling will lead to better code than others but any choice of spilling is going to resolve in a correct program. And there&#39;s heuristics that people use to pick which temporaries to spill and here are a few or I think three of the most popular ones. One is to spill the temporaries and have the most conflicts. And the reason for that is that this is the temporary. The one thing that you can move into memory that will most affect the number of interferences in the graph. So, the idea is by possible spilling justice on variable. We&#39;ll remove enough edges from the graph that they becomes tolerable with the number of registers we have. Another possibility is a spilled temporaries that have few definitions and uses. And, here the idea is that by spilling those since they&#39;re not used very much, the number of lows in storage will have to add, will be relatively small and so if a variable just isn&#39;t used in many places, then the actual cost, in terms of additional instructions that are going to be executed to spill it, is relatively small. And another one and this is actually the one that I think that all the compilers implement is to avoid spilling an inner loops. So, if you have a choice between spilling a variable that&#39;s used within the. Innermost loop for the program and one that is used some place else. You probably preferred this that you spill the one that is used not in the innermost loop absolutely because again, that will result in fewer loads in stores. You really want to avoid adding additional instructions to your inner loop. 

