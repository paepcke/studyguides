5.15
slide
Compilers Implementing Type Checking
In this video we&#39;re going to talk about how one takes the type checking rules and translates them into an implementation. The high level overview of cool type 

17.1
slide
Implementing TC COOLtype checking can be implemented in a single traversal over the AST Type environment is passed down the tree From parent to child Types are passed up the tree From child to parent ex Nken
checking is that it can be implemented in a single traversal over the abstract 

21.08
writing

syntax tree. And there&#39;s actually two phases here. There&#39;s the top down phase, in which the type environment is passed down the tree. And there&#39;s a bottom up phase in which the types are passed back up. So we start at the root of the tree with an initial type environment, this type of environment is passed down recursively through the various nodes of the abstract syntax tree until we hit the leaves. And starting at the leaves we use the environment to compute the types of each sub-expression working our way back up the tree to the root. Let&#39;s start our 

55.55
slide
O M C F ellnt O M C Implementing TC F e2 Int O M C l e1 e2 nt Add ex um
discussion of the implementation of cool type checking with one of the simpler rules in the type system, the rule for addition. And let&#39;s just briefly review 

62.92
slide
Implementing TC O M C e Int O M e2 Int Add O M e1 e2 nt l
what this rule says. It says that the type check E one plus E two, we first have to type check E one, and then we have to type check the sub expression E two. And both 

75.81
writing

of those sub expressions have to have type end. And if they do then we can conclude that the overall expression, the sum of the two sub expressions, also has type A. And furthermore, this type checking is carried out in some environment. In this case, the environment is the same for the entire expression and both sub expressions. Just, just to remind you, there&#39;s always an object environment for the object names and scope, a method environment for the methods of the various classes and we always need to know the current class. Now how will we implement this? Well we will have a recursive function called type check It takes two arguments, it takes an [inaudible] environment and this will be a record, I&#39;m not specifying exactly how this record is declared but it is essentially going to be three parts m, o, and c. And it also takes an expression, and so here we are just doing the case here where the expression is E1 + E2. And what should the code look like? Well, we can pretty much just read the rule and translate directly into code, and this is one of the nice things about the notation for type systems, is that it really tells you very, very clearly how to write the implementation from the description. So what&#39;s the first thing we have to do? Well we have to type-check the sub expression E1. And we can see from the rule that the environment in which E1 is type checked is exactly the same as the environment of E1 plus E2. So we just pass whatever our original environment argument was for E1 plus E2. We pass an, an argument on, to a recursive call of the type check, to type check the sub expression E1. And that type-checking will run and it will return some type T1, and we don&#39;t know that T1 is an integer at this point. We&#39;re gonna have to check that, so we just remember what the type of E1 is. And, furthermore we type check E2, okay? And that also happens in the same environment, we can see that here in the rule. And again we&#39;ll get back some type for E2, so type T2. And then we confirm that both T1 and T2 are type integer. And we could have done a, the track that T1 is, is int a, right away, right after we had the type check T1 that would be a fine thing to do. Here just to save space on the slide I have to clip the checks for T1 and T2 a, on one line. And if that check succeeds. If it doesn&#39;t succeed, presumably there should be some code in here, to, print out an error message But if that, if both T1 and T2 are in fact integers, than the type of the whole expression is also an integer. So that&#39;s what&#39;s returned by this call, by the outermost call here, to the type check function. So now let&#39;s take a look at a 

251.249
slide
Implementing TC O M C e0 TO O T x M C M I el T1 4L Let Init QMCR F let sz in el T1 ex um
somewhat more complex type checking rule and its implementation. Here&#39;s the rule 

255.409
writing

for a net with initialization. So we&#39;re declaring a variable x, of type t. And that&#39;s going to be visible in the expression E1. But before we execute E1, we&#39;re going to initialize X to the value of E0. And then after we&#39;ve evaluated the entire let expression, we expect to get back something of type T1 And now, for all of that to work out. A few things have to be satisfied and those are listed as premises here of the rule. First of all E0 has to have some type T0 which is a subtype of T. And that&#39;s to guarantee that this initialization is correct, that X can actually hold something of E0&#39;s type. And, for the entire expression to have type T1, well then E1 has to have type T1. But that type checking is carried out in an environment that&#39;s extended with the declaration for X. So we, so we also know within E1, that X has type T. So now let&#39;s write the type-checking case for this. So the function type check is again is gonna take an environment as argument, and now we&#39;re doing a case for a led with initialization. So, just reading of the, the rules and what the conditions are that we have to check, we can see that one of the first things we have to do, or one of the things we have to do, is to check that E zero has some type T zero. So we just have a recursive call to type check here. This is carried out in the same environment as the overall expression. So we just pass the environment on to the recursive call And now we&#39;re just type checking E zero and we record its type T zero. So the second premise is implemented like this. Now we&#39;re type checking E1 and we expect it to have some type T1, but now 

366.569
slide
Implementing TC O M 20 1 0 O T x M CM e1 T1 O M CgF TypeCheck Environment let x T e T0 TypeCheck 1 7 1 TypeCheck Environment add x T e1 ex um


366.569
writing

the environment is different, so we&#39;re taking the original environment, the overall environment of the expression and we&#39;re adding, a declaration that X has type T to that environment. So we&#39;re extending the environment, with an additional variable declaration. Okay? And so we do that type checking call, and we get back a type T1. Now, we have to check that T0 is a sub-type of T. So that&#39;s a, that&#39;s a call to some function that implements the sub-typing relationship, and if, if that passes, if that check passes, well then we&#39;re done. And we can return the type T1. And there&#39;s a little mistake here on the slide, there shouldn&#39;t be a semicolon there. S o we just return T1 as the type of the entire expression. 

