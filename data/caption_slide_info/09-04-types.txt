4.58
slide
Compilers 1 Types
Welcome back, in this video we&#39;re going to have an introductions to types. So a very basic question to ask is what is a type anyway. And this question is worth asking 

18.43
slide
Types What is a type The notion varies from language to language Consensus A set of values A set of operations on those values Classes are one instantiation of the modern notion of type
because the notion of type, what a type is, does vary from programming language to 

22.619
writing

programming language. Now roughly speaking the consensus is that a type is a set of values, and also, perhaps more importantly, a set of operations that are unique to those values, a set of operations that are defined on those values. So, for example, if I looked at the type of integers, there are some operations that you can do on integers. You can do things like, you can add. And you can subtract integers and you can compare integers whether they are greater than or equal or less than these operations are you know about numbers and then there are operations on strings And strings are a different type. They have. Operations like incantation and testing whether a string is, is an empty string or not And the other various variety of functions that are defined on strings. And the important thing that these operations are different from the operations defined on integers and we don&#39;t want to mix them up. It would be bad if we started doing string operations on integers for example. We would just get nonsense. So, in modern programming languages types are expressed in a number of different ways. In object orient languages. Often we see classes being the notion of type. So, [inaudible] in cool, the class names are the types, they&#39;re all, the, with one exception, called self type. The class names are exactly the types. And I just wanted to point out that this need not be the case. It happens that it&#39;s often convenient in [inaudible] Victorian languages to equate classes and types. But there are other designs that, where the classes are not the only kinds of types, or whether they&#39;re. And in some languages, [inaudible] where there&#39;s no notion of class, the types are completely different things. So, classes and types are really two different things that happen, to be identif ied in a lot of object oriented designs. And I just want you to be aware that that&#39;s not necessarily the only way to do it. So consider the assembly language fragment add R1 R2 R3 and what 

142.03
slide
Types Consider the assembly language fragment add r1 r2 r3 What are the types of r1 r2 r3 ex um


142.03
writing

does this actually do. Well it takes the contents of register R2 and the contents of register R3 it adds them together, and it puts the results in register R1. And the question is, what are the types of R1 R2 and R3 And you might hope that they&#39;re integers but in fact this is a, this is a trick question Because at the assembly language level I can&#39;t tell. There&#39;s nothing that prevents R1, R2, and R3 from having arbitrary types. They could be, they could be representatives of any kind of type and because they&#39;re just a bunch of registers with zero and 1&#39;s in them the add operation will be happy to take them and add them up even if it doesn&#39;t make sense And produce a bit pattern that then stores into R1. So, to make this a little 

186.54
slide
Types Certain operations are legal for values of each type It make sense to add a function pointer and an integer in C It does make sense to add two integers But both have the same assembly language implementation Alex Allan
clear perhaps it&#39;s useful to think about a, a certain operations that are legal for 

191.77
writing

values of each type. So for example, it make perfect example to add two integers, if I have two bit patterns that represent integers, then when I sum them up I would get a bit pattern that represents the sum of those two integers. But on the other hand, if I take a function pointer and integer and I add them together, I really don&#39;t get anything. Okay this is another the function pointer is a bit pattern. The imaginer s a bit pattern I can take those two bit patterns. I could run them through and I do get out a new set of bits. But there&#39;s no useful interpretation of that results. The resulting things I get doesn&#39;t mean anything, but the problem is that these both have the same assembly language implementation. Okay, nothing at the assembly language level, these two operations look exactly the same. So I can&#39;t tell at the assembly language level, which one of these I&#39;m doing. If I want there to be types, if I want to make sure that I only do operations on the correct, that I only do certain operations on, on their correc t types, then I need some sort of type description, some sort of type system to enforce those distinctions. 

257.899
slide
A type system specifies which operations are valid for which types The goal of type checking is to ensure that operations are used with the correct types Enforces intended interpretation of values because nothing else will Types
Perhaps I&#39;m belaboring this point, but I think it&#39;s important, so one more time. A 

261.769
writing

languages type system specifies which operations are valid for which types. Then the goal for type checking is to ensure that operations are used only, only with the correct types. And by doing this, type checking enforces the intended interpretation of values because nothing else is going to check. Once we get to the machine code level, it&#39;s all just a lot of 0&#39;s and 1&#39;s, and the machine will be happy to do whatever operations we tell it to on those 0&#39;s and 1&#39;s, whether or not those operations make sense. So the purpose of type systems is to enforce the intended interpretations of those bit patterns and make sure that if I have a bit pattern for integers that I don&#39;t do any non-integer operations on that and get something that is meaningless. Today, programming languages fall into three different 

311.33
slide
Types Three kinds of languages Statica ly typed All or almost all checking of types is done as part of compilation C Java Cool Dynamically typed Almost all checking of types is done as part of program execution Scheme Untyped No type checking machine code Alex Amen
categories with respect to how they treat types. There are the statically types 

315.65
writing

languages, where all, or almost all, of the checking of types is done as part of compilation, and Cool is one of these And other languages that you&#39;ve probably seen, like C and Java, are also statically typed. Then there are the dynamically typed languages, where almost all of the checking of types is done as part of program execution. And the Lisp family of languages, like Scheme and Lisp itself, are in this category, as are languages like Python And pearl So you&#39;ve probably used, or heard of, at least, some of those languages And finally there are the un-typed languages where no type checking is done at all, either at compile time or at run time. And this is basically what machine code does. So machine code has no notion of types and it forces no extraction boundaries, when it executes. For decades there has been debate about the relative merits of static versus dynamic typing and without taking sides let me lay out for you what the various 

374.71
slide
Types Competing views on static vs dynamic typing Static typing proponents say Static checking catches many programming errors at compile time Avoids overhead of runtime type checks Dynamic typing proponents say Static type systems are restrictive Rapid prototyping difficult within a static type system Alex mm
proponents on each side say. So, the people who believe in static typing say, that static checking catches many programming errors in compile time and it 

383.08
writing

also avoids the overhead of runtime type checks. If I hooked on all the type checking and compiled time well I don&#39;t have to check the types at runtime. I don&#39;t have to check when I go do an operation that the arguments are of the correct type because I already that check once and for all in compile time. And these things are both definitely true. These are the two big advantages of static checking. First of all Proves that some errors can never happen those are caught at compile time so I never have to worry about those errors at run time, and its faster Dynamic typing proponents counter that aesthetic type systems are restrictive. So essentially, aesthetic type system has to prove that the program is well typed, that all the types makes sense And it does this by restricting what kinds of programs you can write. There are some programs that are more difficult to write in an aesthetic type language because the compiler has a hard time proving them correct. And there&#39;s also a belief that I, I see commonly stated that rapid prototyping is more difficult with ecstatic type system. I think the idea here is that if you&#39;re prototyping something, if you&#39;re exploring some idea you may not actually know exactly what all the types are at that point in time And having to commit to something that is going to work in all cases. You know, to having a type correct program when you&#39;re just trying to fiddle around and figure out what it is you&#39;re trying to do. That&#39;s very constraining and makes the work go quite a bit slower. So what&#39;s the actual situation and practice today? Well, an awful lot of code is written in [inaudible] type languages. And the 

477.929
slide
Types A lot of code is written in statically typed languages with an mechanism Unsafe casts in C Java People retrofit static typing to dynamically typed languages For optimization debugging debatable whether either compromise represents the best or worst of both worlds
practical [inaudible] type languages that people use a lot have always have some kind of escape mechanism. So, in C, in Java, in C++, you have some notion of 

487.36
writing

unsafe cast. In C an unsafe cast can just results in a runtime crash. In Java it r esults in an [inaudible] runtime, when you have an unsafe or failed downcast. But the, the effect is that you can get run time errors for type reasons. [sound] Now on the dynamic typing site, the people who programming dynamic languages, they always end up or seemed end up record fitting static typing to these dynamically typed languages. So typically if a dynamically typed language because popular enough than people trying to write optimizing compilers for them and the first thing that people want to have on an optimizing compiler. Is some insta, type information because it helps to generate much better code? And so people wind up going back and trying to figure out how to get as many types as they can from these dynamically types languages as soon as they start trying to build serious tools to improve the programs written in these languages. And in my opinion it&#39;s really debatable whether either compromise because, both of these are compromises on the either strict static or strict dynamic point of view. But if either one of these represents the best or the worst of both worlds. But this is certainly where we are today in practice. Now Cool is a statically typed language and the types that are available 

568.4
slide
Types The types in Cool are Class Names SELF TYPE The user declares types for identifiers The compiler infers types for expressions Infers a type for every expression ex mm
in Cool are the class names, so every time you define a class you define a new type, 

573.33
writing

and the special reserve symbol SELF&lt;u&gt;TYPE which we&#39;ll be talking about in a separate&lt;/u&gt; video all of its own. And the way cool works is that the user declares the types for identifiers. For every identifier you have to say what its type is But then the compiler does the rest of the work. The compiler refers the type for expressions. And in particular the compiler assigns a type to every single expression in, in the program. So it will go through the entire abstract syntax string and using the declared types for identifiers it will calculate a type for every expression and sub-expression. To wrap up, it&#39;s worth mentioning that there&#39;s a couple of 

611.88
slide
Types Type Checking is the process of verifying fully typed programs Type Inference is the process of filling in missing type information The two are different but the terms are often used interchangeably
different terms people use for the process of computer types, and that they mean 

616.2
writing

slight ly different things. So the simpler problem is what is known as type checking. Here, we have a fully typed program, meaning we have an abstract syntax, free with all the types filled in on every node, and our only job is to check. That the types are correct, so we can just look at each note and its neighbors and confirm that the types are correct in that part of the tree. And we can do this for every part of the tree and check that the Program is type correct. Type inference, on the other hand, is the process of filling in missing type information. So here the view is that we have an abstract syntax tree with no types on it, or perhaps just a few types in key locations, on say, on the declared variables, and then we want to fill in missing types. We have some nodes in there, there with absolutely no type information at all, and it&#39;s not just a question of confirming or checking that the types are correct, we actually have to fill in the missing type information. And these two things are different. Actually there are many languages that are actually very, very different, but people often use the terms interchangeably, and will not be particularly careful in my videos about which term I am using either. 

