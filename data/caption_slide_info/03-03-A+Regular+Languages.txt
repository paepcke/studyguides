1.569
slide
Compilers 1 Regular Languages
In this video, we&#39;re gonna talk about regular languages which are used to specify the lexical structure of programming languages. To briefly review 

14.19
slide
Lexical structure token classes w We must say what set of strings is in a token class Use regular languages Regular Languages
the lexical structure of a programming language is a set of token classes. And each one of the token classes consists of some set of strings. Now we need a way to specify which set of strings belongs to each token class and the usual tool or 

28.789
slide
Regular Languages Single character Epsilon
doing that is to use regular languages. So in this video we&#39;re going to present like 

34.55
writing

regular languages and define what they are and then in subsequent videos we&#39;re going to look at some examples using them in actual programming languages. To define the regular languages, we generally use something called regular expressions. And each regular expression team now it&#39;s a set. There are two basic regular expressions. If I write the single character C, that&#39;s an expression and what at the notes is a language containing one string. Which is the single character C, 

72.17
slide
Regular Languages Union Concatenation Iteration


72.17
writing

okay, That&#39;s one basic form so for any single character I get a language with a one string language with just and then the only string is that character. Another basic building block of regular languages is the regular expression epsilon which is the language. That contains again just a single string, this time the empty string. And, one thing that&#39;s important to keep in mind is that epsilon is not the empty language, okay? So this is not correspond to the empty string and the empty set of 

105.84
slide
Regular Languages Union A B Eadie 43 Concatenation Ag AbeBE Iteration MMMMMM an
strings. It is a language that has a single string namely the empty string. Besides the two base regular expressions, there are three compound regular expressions and we&#39;ll just go through them here in order. The first is a + b which corresponds to the union of the languages a and b. So this would be the set a such 

130.539
slide
Regular Languages gal Le 43 of B be 83 Union A B Concatenation RE 52 5 L14 A Iteration a rare A A A44 LJ H a Hmzs
that a is in the language of big A, little a is in the language of big A union, little b such that b is in the language of little b so just the union of the two sets 

141.45
slide
Def The regular expressions over 2 are the smallest set of expressions including Regular Languages
of strings. Concatenation is like string concatenation. So if I have two languages, 

147.41
writing

a and b, or two regula r expressions, a and b, then, the concatenation of a and b Is equal to all of the strings. Little a concatenate with little b where a is drawn from the language big A and little b is drawn from the language big B. And so this is cross sporadic operation. Choose a string from a. Choose a string from capital B and then combine, put them together with the string from a first and choosing strings at all possible ways from all possible combined strings and that&#39;s the language a concatenated with b. And finally there&#39;s a kind of looping [inaudible]. This is pronounced a star or is called the Kleene iteration and, or the 

192.83
slide
Regular Languages rm tum
Kleene closure. And a star is equal to the union. For i greater than = zero of a to 

202.56
writing

the i, a to the i-th power. What&#39;s that mean? Well, a to the i-th power is just a to concatenated with itself By times. So this is, [inaudible]. And note that because i can be = zero, one of the possibilities here is a to the zero, so a concatenate with itself zero times and what is that, well that&#39;s the language epsilon. So that&#39;s the language contain the empty string. So the empty string is always an element of a star. To summarize the last couple of slides the regular expressions over some alphabet sigma. The smallest of that expressions that include the following. So, let&#39;s define it so, the regular expression r are equal to epsilon is always a regular expression. Or, another possibility is the single character c where c is an element of our alphabet, okay? So this is important the 

264.22
slide
g M Regular Languages nu l l u nu 1 Uli I l4 all rhme a 1 26 5 1 as r
regular expressions define with respect to some alphabet. So we have to pick a family of characters that will form the base cases of the regular expression and here, you know? We have one base regular expression for each character in the 

277.53
slide
Sr 5071 I I IH II r Uli l4 all 3 me a 1 26 451 94 zll 153 nus should be 11 m A
alphabet. And then we have the compound expressions. So, another possibility Is 

282.93
slide
ul n Ill lll u I I all 4703 0313 L 134 146324 This should be 11 m A
that a regular expression is the union of two regular expressions. Another one is that the concatenation of two regular expressions. And the last one is that it 

292.41
slide
Regular Languages ul l n Ill lll l l4 all a 1 20 32 AM u 1 2 4 w This shouldbs A z 5


292.41
slide
ul l n Ill lll u w 4 all shame 32 fab when This shouldbs n ow d 50 l
could be the iteration of a regular expre ssion. So these five cases are the set of 

299.52
slide
R L 0 egu ar anguages ul u Ill lll u 1 all L 134 146324
regular expressions over a given alphabet. Now this syntax here for describing the 

306.33
slide
R L 0 egu ar anguages u 4 lll lll r16 U l I w 4H rmJ a 12 fab urea gtH t
regular expressions with these vertical bars and these different cases on the 

311.33
slide
R L 0 egu ar anguages Ivll l n Ill lII U l4 all 717 a I 134 fab urea This should D8 11 A gm
right hand side in this recursive definition of r, If you haven&#39;t seen this before, this is called the grammar. And that&#39;s not important for this lecture. It&#39;s not what this, this lecture is about but we&#39;re talking about grammars when we 

323.99
slide
R L 0 egu ar anguages Ivl I IH Ill l l lav Ulc all L 2 1 a5 geld 9 13 315 Ea U QM c 20 h 0 4 ll
get to parsing. Next I&#39;d like to do a few examples of actually building regular languages, writing the mountain and thinking about what they mean. And as we 

335.85
slide
Regular Languages Ivll l ll ul llll U u all 3 a 131 fab urea Le13 This should DB 11 gm a I c LDLL czo I 0 1 Ale um
said, whenever we&#39;re talking about a regular language, we first have to say 

338.45
slide
Regular Languages I IH III lIl lac UIL l all rl rmjx a w 4614 94 gt L Q I i 02 u 0 13L0 114 13 n 0 4 ll
what the alphabet is. And so, for these examples let&#39;s just use the alphabet zero 

343.42
slide
Ivl I IH lll 1 all a L25 L W 536 23 6 H u 0 1 3 Chaim 1 5 NONI
and one. So these are going to be languages which consists of strings of 0s 

348.75
slide
Ivll IH I I llll W I l all a L25 L 5 134 5 4 cg H 0 4 i 0 H 3L I 3 L Hm Alan um
and 1s. And let&#39;s start with a very simple example. Let&#39;s think about the language 

353.62
slide
Regular Languages Ivl l l Illa mu 1 all 3 03 L26 32 34 fab 46 1 2 4 Thls shouldbe II A 4 2 ggla 31 0 H c 6 L I H l 3Lo 3 IN I Hm
one star And what language that to note. So, well, we know the definition of star. 

361.9
slide
M l l Illa mu I l4 all 3 wa a L25 ab 16 1 9 4 As foil 6 QM u 0 1 A MGM l a RN55 61 an I Ale um
If you remember, that was the union over i greater than = zero of one to the i. Okay. 

371.49
slide
nu 4 Illa mu I l4 all sh an L25 L Hall ab 46 1 9 4 LS 0 6 H u 0 1 3Lawlew A Ugh M all m 0 5 an 1 us um


371.49
slide
Ivl I IH Illa mu I l4 all 3 a L25 1 ab 46 1 9 4 La Ignisjgdi 3 foil Lauwa 0 1 6 QM c Z u 0 1 3LO PXO 13D H a RN55 mg and 1
And what is that equal to? Well, that&#39;s just one. Repeated i that&#39;s what the 

377.28
slide
Ivll I IH Illa mg l4 all 3 L25 L W foil 6 W u 0 1 A C1 0 l a shmss 0 9 0 5 an 1 z 5 Me um
concatenation of one to the i means, okay. It means one concatenated with itself i 

384.6
slide
Regular Languages Ivl I IH ul ll l lac I 1 all 0 L26 AO qe 1 94 3 3 This should b3 11 A l icillzoj 0 1 6 W H NI v Co 3 J0 Wm an o G and 1 z uu um
and so this is going to be the empty string. That&#39;s one concatenated with 

390.96
slide
210111 l Il Hum UIL 1 l4 all 103109 L 4 14 gala g4 Lel3 3nlzo3 L Wehmeansmlsshuuldb HM 01 15 C20 3 o I n Ca I ILET 5 all s r n3 0 9 and 5 z 2
itself zero followed by one followed by eleven followed by one concatenated with 

396.45
slide
07 w un 1 DII IIII IV 20 we 64 1 1 9 iulzo3 Wm means nus shame ban 01 This should hem 03A Mm 0mm 0 1 20 r H 0 u 0 1 I b all 3M3 mg an z 2
itself three followed by one concatenated with itself four followed by one 

401.69
slide
Re ular Lan ua es 301 i un l qul ll l n gt UIL 1 4 v 3 L I I E 3l1103 01 ThlssmumA am in o ll 1 ll 0 1 3 o o I H 3LOHIO AD Ca H Lin 6 a 3 a sh o g dual 1 z 2
concatenated with itself any number of times. Okay, And this, and so we can see 

407.15
slide
R L 30711 egu ar anguages un 1 Hlll llll UIL 1 l all Tim an axe L Id 03L gab Lel3 3ulw3 mchmeanstmsshnmaben 01 Thlsshouldbe oinzms 0 1 3 20 a a l H 0 L11 9 3 9 9 0 5 an z 2


407.15
slide
R L 307 egu ar anguages un 1 Hlll lln u m u 1 an vs F L e l oftL I a S 4 1 32 0 1 3 o l u 0 1 3Lo D LHC 3 a 8 35 0 9 0 5 dun 1 z 2
that this is just equal to all strings Of 1s, All right? Now let&#39;s do a second example let&#39;s think about the language one. Plus zero concatenated with the language one, okay? And remember how concatenation works is across products we take every string in the first expression and combining with every string in the second expression. So this is going to be equal to the strings a b where a is drawn from one + zero and b is drawn from one. All right? And, what can that be when there&#39;s two traces for a. A could be one or zero and b could be one so in fact this is equal to the set one, one and the strings one, one, the second [inaudible] of the strings one, one and one zero. All right? Let&#39;s do another examples, slightly more complex. Let&#39;s build up here to having two iterations in a union so have zero + one and think of about what&#39;s that equal to but we&#39;ve already know what one is equal to. That&#39;s equal to all strings of ones and so by analogy zero must be all strings of zeroes then we take the union of those two things so this is actually really easy to write out. Let&#39;s write them out in this notation so we have zero to the i, for i again equal to zero, okay. That&#39;s zero union with. One to the i or greater than = zero. That&#39;s the strings of all one. So there&#39;s a set at this expression to nodes. And for our last example, let&#39;s think about zero + one. Now, that iterated. Okay? So, we put the star around the union of the two individual character instead of having the star on each character individually in taking the union of the two things. So what is the, what is this expression equal to? Well, let&#39;s work with the definition of star. So, we know. That this is the union over i greater than or equal to zero of zero + one to the i. And what does that look like, well, that looks like first of all, there&#39;s the empty string, right? And then another string in this language is, is. Excuse me, is drawn from zero + one and so this, I shouldn&#39;t say another string but another set of strings is the language zero + one. And then zero + one concatenated with itself, okay? And in general, is going to be zero + one concatenated by itself i times. Now what does that mean? That means that every position, if we have a string of length i, at every position we could pick a zero or a one to plug in and this works for any length string. This is gonna be true of strings of every length and so in fact this language is just going to be all strings Of 0&#39;s and 1&#39;s. In fact, what that means is this, is the cycle effect on our alphabet. Our alphabet that consists of zero and one and so this is the set of all strings that you can form over the entire alphabet, And that has a special name when that happens when you have a regular expression that denotes the set of all strings you can form out of the alphabet, we write that as sigma star, okay? So just meaning that all the strings of the alphabet integrated as many times as you like One last point I wanna make on this before we go on here is that there are actually lots of ways to write each of these different languages. There&#39;s not a unique way to write these. So for example, let&#39;s just take this language here. The second one that we did, and let me switch colors. Another alternative way to write this since we know the meaning of it is these two strings one, one and one zero, I could have written it as one, one. + one zero and that would mean exactly the same thing. We used two expressions denote exactly the same set similarly with one star, I could write this as one &lt;i&gt;. + one.&lt;/i&gt; And cuz this wouldn&#39;t change anything. Adding in the single string one wouldn&#39;t change anything since one is already included in one&lt;i&gt;. This might be kind of a&lt;/i&gt; silly way to write that set but it doesn&#39;t matter it has a meaning and it means exactly the same things as one&lt;i&gt;. The point again is that there is more than one way&lt;/i&gt; to write down the same set to write, to write, you can write multiple regular expressions that denote the same set. 

