4.58
slide
Compilers 1 Cool Example
Hello again. In this video we&#39;re gonna wrap up our overview of cool with one more example of writing a cool program. For our final example, let&#39;s look at a program 

20.06
slide
Compilers Cool Example Ne xxxx m


20.06
slide
mno4 xml n macaw n
that actually manipulates some interesting data structure. So we&#39;ll begin here by 

26.63
slide
much 1 gummy
opening up a file. And let&#39;s call our program list dot CL this time. And as 

33.71
slide
mno4 m em ham D
usual, I will begin by writing our main routine, and our main method. And once 

44.47
slide
mm D Hm


44.47
writing

again let&#39;s, let&#39;s make this inherit from I/O so we can do the I/O routines here. And let&#39;s just begin with something very simple, as always. Let&#39;s just have something that prints out &quot;Hello World&quot; but in a little bit of an unusual way. Let&#39;s, we&#39;re going to end up writing a list, a list abstraction. And let&#39;s first build a list by hand, or at least build the elements of a list by hand, and then we&#39;ll actually build the list abstraction and put them in a list. So, let&#39;s have some strings. So we will have our string hello, and this will also illustrate how you do multiple LET bindings simultaneously. I shouldn&#39;t say simultaneously. How you do multiple LET bindings in one LET expression. So you do them by just listing them, and notice that this uses commas as a separator rather than semicolons as a terminator. So this left binding is going to define three names. Hello, world, and new line, all of which are strings. And then We&#39;re going to now print these out on the screen, so we are going to want to be able to do out string, and since main inherits from self, we can do that without an object there, because it just, again, dispatches to the self object. And we want to concatenate these strings together in the right order. So we&#39;ll do hello dot, and since hello is a string, it can be concatenated to world, and world is a string, so it can be concatenated to newline And that should do the job. And just like probably one more thing about this lead this, these lead bindings here. This notice if it, the comma is, the comma is the separator here, meaning it doesn&#39;t come after the last one on the list. So it just separates that into the list, so it&#39;s not a terminator. And now we can close up our main procedure. Close up our class definition. Save it and now see if it compiles. Oh amazing! First try. And we run it, and it 

196.26
slide
cmo4 mm mm Hm m mum Object k hells Sczlng 7 Hells m warld smng 7 mud m newline smug 7 n Duciacxlnylhellumuncat madman newline H quce annx useu a a aamen cuu nu c


196.26
slide
class Haln lnhezlca IO mum Object 3 hells smug 7 Hells m warld Scxlng 7 mud m newline smug 7 n Duciacxlnylhellumuncat wuzld cuncatlnewllnel1 quce af5 Illuserala a aalken cuu Illa c mm ham cmM mm mm mm Vemm 6 5 a mum 4 2003 momma by game R Lam nameu mc edm An See the me mm m a m Cupyx1gm mm mm mm swam mummum Hang mm com pxuqxam magnum mum 5m W mmmma m mm 304 MM 63 mama a Mm 233 cumo4 xcm
prints hello world, as expected. So now, let&#39;s, instead of introducing the three strings separately, and then concatenating them together, let&#39;s write an abstraction 

205.709
slide
class Han Inherit IO maxnU Object Jet hells Sczlng ee Hells m wurld smng ee Hume m nemme smug e n Duciscxlnylhellumuncat madman newlinEJ H eeeeaa eee1 eagle 115 c emu em new spin Vemm 6 5 e axy 4 2003 Cupyxxgh maema by gene R Lem uemgcemeceeu en mm Reeexvee See me me mm m a an cnpyngm heme needed zen c mm nemmlex ienu mm mm mm eeeeeemny exemee 3m ee magnum we need 304 Mme as bxanche a 33 cemo4 D
where we can build a list of strings. And then that abstraction will have a function 

210.18
writing

within it to do the, to do the concatenation. Alright, so we&#39;ll have a class called list. And, every list needs to, I think, to have two components. So first, it&#39;s gonna have the item that&#39;s in the list, and that&#39;ll be a string. And then when you have a pointer to the next, to the, to the tail of the list, to the rest of the list. And so I have a next, field that, points or is another list, is another list of strings. Now we need a couple of methods in order to, in order to use this list. We&#39;ll need to be able to initialize a list in some way. So the initialization function will take an item and, the rest of the list, the next part of the list. And, what is it going to do? Well it&#39;s gonna need to set the fields of the object, And so this one has to be done as a series of assignment statements. So we&#39;ll need a statement block and we will set the item to be the I argument. We&#39;ll set the next, attribute to be the N argument. And now, we actually want, this initialized object here, this, this method here, to return the object itself. So that, and that&#39;ll be convenient for chained together calls to [inaudible]. So we&#39;ll have it return self. It&#39;ll return the self object. And that&#39;s the end of out statement block. And then that is the end of our method. And, I made a mistake up here. We&#39;ve gotta declare the return type of a knit. And what it&#39;s going to return of course, it returns a, a object of type list. I&#39;ll need to put a list declaration there. Alright, so that takes care of, of a knit . And now we can use this to build, build a list down here. So what should we do? Let&#39;s actually have a new variable called list. That we&#39;ll introduce here in this lead, this series of lead bindings. And let&#39;s just build a list out of these three objects. So we&#39;ll say, we&#39;ll have a new list, and then we&#39;ll initialize to contain the string hello. And. What should the, rest of the list be? Well that should be another list, which is initialized to have the string the world. And what should be inside of that list file, is another new list object, which we&#39;ll initialize to have new line. And now what do we put here, actually there&#39;s a little bit of problem here isn&#39;t there? We need to put a list object here. But we don&#39;t want to allocate a, a new list object, we want that to be really the equivalent of a, of a null pointer. And there&#39;s no name for that in Cool actually, you can&#39;t write down the name of a null pointer. It&#39;s called void in Cool. There&#39;s no, there&#39;s no, no special symbol for that. So we&#39;ll have to create a variable that is just not initialized. And that will be, as well, uninitialized variable of type list will, in fact be void. It&#39;ll be a null pointer. So let&#39;s call that nil. And it&#39;ll be a typed list, and no initializer. And so nil there will point to nothing or the, the void point. And then we can use nil to terminate our list here. And then we have to close off all the params for all the nesting here. And I think that&#39;s it. And so that will be our list. Okay, so we have a list of three strings. And now what we want to do with that is to print it out. And so what we would like to do is to have a list fall off the list, and then a function that&#39;s gonna flatten that list and we&#39;ll just print it. So that is the what the, what the main program should do. And now. You have to write the flatten function. So flatten takes no arguments. And it&#39;s going to return a string. It&#39;s going to return a single string. And flatten is a pretty simple function. U h, what do we have to do. Well. There&#39;s really two cases. One is if we&#39;re at the end of the string, and the other is if we&#39;re not yet at the end of the string. So let&#39;s, test for that. So how do we know if we&#39;re at the end of the string? Well, if the next pointer is, is void, then there is no, nothing more in the string. And there actually is a special test for that in Cool. It&#39;s called the isvoid, function, and it&#39;s written like this. So if isvoid, of next, okay? So [inaudible] next field. So if the next field is void, then what are we going to return? Keeps. Well then the result here is just, the item, whatever the item was in this last element of the list. And otherwise What we want to do, Well, otherwise, we want to take the item and we want to concatenate onto it, the result of flattening the rest of the list. And that is our flattened method. So let&#39;s see if that works. So let&#39;s compile this. And we got a couple of syntax errors here. So let&#39;s go back and see what&#39;s 

541.95
slide
class L15 Scxlng next List mun Scxlng n List L15 e 1 next e n ee flaccenl String 1f mvnm nexn than Item else Icemxmncat nu mu Hem meme m Lanai Object 1e nenn Scxlng e Hells m warld Scxlng e mm n newnne Scxlng e n m men 1 new List nnclhellur new List mumnxm new List nnclnewllne mlm Wruce af Ill userala a aalken cuulIlla c emu mm new emu em new spin Vemm 6 5 a Januaxy 4 2003 Cnpyngh mmm by gene R Lam nemecemeceeu All new Reeexvee See me me mm m a m Cupyxxgm name Leaded zen c mm Wm mmmm new mne coon mm eeeeeumny exemee 5m ee we em 304 mice as carnage mm bxanche 92 uchex 233


541.95
slide
eldde L15 String next List mun Scxlng n mu L15 e 1 next e n de zldccenu String ex tended nexn men Item 3153 came flatten LnexEH nu ddm menu 10 mum Object 1e hells Scxlng e Hells m warld Scxxng e mend n newnne sum e n m men 1 new L1 EJ nchhe lDr new List dmcmuxm new L1 EJ nnanew 1ne mlm quce dienx ddeu d d dddken cuu nu c 5011104 cuu caulc hams cum04 cuu am 1 spm Vexslun 5 5 mi semen 4 2003 Cupyxxgh assaezaaa by James n ded 11 Right Resexved see me rue name fax d full cupyxxgm nuclce Ledded xddxmddd Cd daxnwudpmdddlex send Wuxld com prugzam ddededdzdny exeddded sddu ee m neddd 304 Mme ad damage dam new when me n dynde dd d den 2 under me 25 syntax dd d eedx w addendum edned dde m ex and pdue ddxdo4 xddd1 amdnmed 92 Us a c uchex 233
going on. So we have a syntax error here, at the end of the, the flatten method. And 

553.46
slide
Class L15 n23 next ScxlngF List mun 1 List L15 e 1 next e n ee Scxlngr flaccenl String 1f lsvnld nexn than Item else l em cuncat flattenlnextl1 Class Ham Inherit IO namu Object 1e nenn Sczlng e Hells m warld Scxlng e Wane n newnne Scxlng e n m men 1 new L1 EJ 1n1cLhe Dr new List 1111 wuxldr new mac nn newlinEr nnm can m cuu caulc hams ca nu4 cuul spun 115 5 spm Vexamn 5 5 mi Januaxy 4 2003 Cupyxxgh assaezaaa by James a Lam An mgnu Resexved Luaded lasx 1b Erap handlex iellu unne coon pruqxam eneeeeezany executed Scat ee lnacxacclun 49 need 304 wxlce 69 bxanche 92 cum04 cuu caulc hams 115 C1 Jane M exam a ma neax w 115 c nne 2s Syntax exam a ma neax w cmnacm aanea aue m lea and pane camo4 D See the tale name fax a fall cupyxxghc nnnce Llamaecameceeu 00131 233
we see that we left out the [inaudible] to close a conditional. So a conditional has to be ended with, with [inaudible]. Alright, and let&#39;s see if that&#39;s working now. And we still have a syntax error, at line 29. And the mistake here is that we 

574.87
slide
Class L15 Scxlng next List mun Scxlng n List L15 e 1 next e n ee fleccenu sunny 1f lsvuld nexc than Item 3153 sense flatten nexEH nu Class Han nnnenu IO maxnU Object 1e hells Scxlng e Hells m warld Scxlng e mun m newnne String e n 11 men 1 new L1 EJ nn he Dr new L1 E nn wur dr new um nnu newnne nnw Wists annx neeu e e eenken cnn nu c cum04 cuu caulc hams cuu spnn 115 5 spm Vexemn 5 5 mi Jennaxy 4 2003 Cupyxxgh assaezaaa by James a Laxa All mgnu Resexved see the rue name fax a full cupyquh nuclce Leaded zen c see cs aaxnnxmpnmnex Hens wane coon pruqxam eneeeumny execncee 5m ee magnum an em 304 wmee 69 cane new mun nne 33 mm a n nee u nnemn Me 25 syntax a n nee amnemn naked ene m Jen and pme emo4 enema 1 c nme he 29 mean a n neat senpnemn naked ene m ex and name gummy 92 Jexn c wuc enu 23


574.87
slide
Class L15 ace String next mac anaua Scxlng n Lam L15 acen e a next e n ee flaccenl String 1f lsvuld nexn than acen else l em cuncat n Class Ham annenu IO naann Object 1e nenn Scxlng e Hells m warld Scxlng e mm n newnne String e n 11 men 1 new mac new List nnclwuxldr new mac nnclnewllne nalm guns 1 cum04 cuu caulc hams Cuxna4 cuu spa 115 5 spm Vexaann 5 5 mi canaaxy 4 2003 Cupyxxgh assaezaaa by Jane 1 Lam uaxnaecameceau an mgnu Resexved see me tale name fax a all cupyxxgm nnnce Lnaaea lusx 11b Erap handlex iellu wandl coon plugxam JCceasiully executed Scat ee rucxacclun 49 neaa 304 wxlce 69 anxnua cuu caulc hams 115 C1 Jane M Sy icax ennx a my neax w Enamel Jane 25 Syntax ennx a my neax w nmpnaunn halted due 0 lax and pane exzux cum04 cuu caulc 115 c bxanche 92 uchex 233 name lane 29 syntax a a aeax w campnama aakea aae m lea aaa pane gammy D
forgot to declare the type of this variable, which is a list. And then it 

581.36
writing

gets initialized to this to this big expression that we wrote out. Lemme just do the indentation a little more nicely here. And notice, something actually is worth mentioning here that this definition here, this definition of the variable list. Depends on the definition of the previous variables in the let. So, each of so when a let binding is made the name of the variable that&#39;s bound is actually available in subsequent let expressions. So in this case this variable list makes use of all of hello, world, and newline, Which we&#39;re defining earlier in the same lead constr uct. Let&#39;s save this, and come over here and compile it. And we see we 

627.87
slide
class Han 10 mum Object 3 hells sum s Hells s warld Scxxng s mud s mums sum s n m usc 1 L15 s new um mumsnu new List nnclwurldr D new L1 E 1n1clnewllne mlm surfacxlng ms flatten m Wists lain lrlnsersla a aalken cuu Ills c cumKM cuu caulc 115 C cum04 cuu am 1 spm Vexslun 5 5 mi away 4 2003 Cupyxxgh manque by James a Lam A axa c w1 c edu 11 mm Rssssvss Sss me ms mm is s mu cupyqum ssms mass xsss s ass cs mmmsss Hens mm was pssms snsssssmny sxssusss Sssss W msmmsns m s 304 Muss as ssmmss g sssn nsm mus ms n synssx ss ss ssss u msmsu ms 25 synch ss ss ssss w asssnsuss muss ans ss ss and pssss ssmosss sss1s sss s mum ms 29 syntax ss ss ssss w asssnsnss muss ans ss ss and pssss ssmosss ss sss1s ssss s ssss sssa ssss asspnsssss ssssss ans ss ssssss ssmsss mm 233 Hechud flatten called wlch wrung numbex 0f axgum
got another bug in the code. So, we come up here. We see we I&#39;ve made a mistake 

634.03
slide
namu et hens atnna es men n Stung es n class Ham Inherit IO Object newnne Scxlng e n na Last as Last e new L1 EJ 1n1 Lhe Dr new List anatmnnd new L1 EJ nnr Lnew 1ne nalm Duciacxlng mst m 5011104 cuu caulc ast t1 Cuxna4 cuu span ast s spm Vexsann 5 5 mi canaaxy 4 2003 Cupyxlgh assaezaaa by James a Laxa uaxasetsmstedu an Right Resexved see tne tale name fax a all cupyndnt nntate Luaded Insx 11b Eiap handlex iellu Wuxld coon ptndxan sacsessmny exetnted State W 49 neads 104 wxlce as bxanche 92 Dchex 233 cuxnu4 cuu cuulc 115 C name Jane M sy xtax exzux at at neax w nast t1 Jane 25 syntax exzux at at neax w Cumpllaclun halted dne ED ex and paxse exzux cum04 cuul caulc ast t1 mutt Jane 29 syntax 31101 at at neax w Cumpllaclun halted dne ED ex and paxse exxux cum04 cuul Its caulc ast t1 Jast t1 37 Hechud Called watn wxunq nnnbex 0i arm ents anpnatm aaatea aae ta amaa D
here. I&#39;ve used functional notation here calling flattened of next and what I 

638.39
slide
nlsss Last ate stung next Last anatu stung n L155 Last aten e a next e 1 se stuns 1f uswnad next tnen aten else aten nnnnatmattemnexty1 n nlsss Han annents m naanu Object et nenn stung e Hells Wurld stung e Wurld r newnne stung e n nu Last as Last e new L156 new L156 nnclwuxldr CumKM cuu caulc nst n1 ca cuu spun nst s spm Vexslun 5 5 mi Januaxy 4 2003 anpyxadnt assaezaas by James a Laxa uaxnsens wasn edu An mgnts Resexved See tne tale name fax a full cnpyndnt nntane Luaded lusx c ass cs 43 11D Erap handlex iellu Wurld coon pruqxam successfully executed Stat es nnstxnntanns 49 neads 104 wxlce as cum04 cuu caulc nst n vvnst n1 nne n syntax ennx at 01 neax u ll c y Jane 25 syntax ennx at nx neax w nnpnatann halted dde tn ex and paxse ennxs cum04 cuu caulc ast n1 115E421 Jane 29 syntax eunx at 01 neax w annpnatann halted dde tn lax and paxse eunxs cum04 cuu cu caulc ast n 1156 6 37 Hechud naned watn wxunq nmtnex at arms ents bxanche 92 Dchex 233 annnnatana naltea dae tn states senantat nsmn4 xsnn1 D
actually wanted to do was to dispatch to next on the method flattened. So, that should be written like that. All right, Probably getting close now. Let&#39;s see if it works yet. Well it compiles and now let&#39;s see if it runs. And indeed it does, 

661.51
slide
Class L15 String next List n1ch Scxlng n List L15 e 1 next e n 3 flattenl smng 1f 1mm next than Item 3153 nnnce next flatten n Class Han Inherit IO maan Object 1e nenn Scxlng e Hells m warld Scxlng e mm n newnne String e n 11 men 1 L15 e new L1 E 1n1clhe 0r new L1 E1 nnclwux dr WIDEE af III usersla a aalken cuulIlls c emu mm new emu em new sem Vemen 5 5 e Canaan 4 2003 Cupyngh manna by Jane R Lem nemecemeceem m mm Reeexvee See me me mm m a nn cupyquhc name needed zen c see wgym mnnenelex new mne coon mam eneeeeeznny executed 5m ee memmm we head 304 Mme 69 new new mam Me 33 mm an ex nee u num Me 25 syntax a n nee w cm an naked ene m Jen and pme eagle leee e mam Me 29 syntax an ex nee w sumpnmen naked ene m Jen and pme amen me eagle e 1 c c1 37 Heme amen eenee mn wrung when u arm em Cumpxlacxun naked ene m mm eemm amen eagle 11e e eemo4 xeen 92 233
Prints out, hello world, Just as we expected. Now let&#39;s go back to our program and let&#39;s generalize this list abstraction in one way. Let&#39;s say that we can have an 

671.65
slide
elass use mm new use until Scxlng n Lasu L15 Item e a hex e n se flattenl String 1f lsvuld men men aged else Icemxmncat n class Han Inherit IO damn Object 1e hells Scxlng e Hells m warld Scxxng e Wurld newnne String e n m Lasc ns L15 e new L156 new Lasc nnclwuxldr an mgms Resexved See the ne mum fax a full Cnpyxlghc nuclce Luaded luax c ass cs 43 1D Eiap handlex iellu Wurld COOL prugzam successzdny executed Scat ee lnsqucclun 4 needs 104 wxlce 69 CumO4 cuul caulc 1 c c 115 C1 nae n Syntax exxux a BI neax u hamcl nae 2 exxux a sx neax w Cumpllaclun halted due 0 ex and 93153 eusxs cum04 cuul caulc 115 c bxanche 92 uchex 233 115 c nne 29 Syntax 31101 a BI neax w Cumpllaclun halted due 0 lax and 93153 eusxs cum04 cuu cu caulc 115 c J c c 2 7 Hechud flatten called um wxunq numbex at am Eats Cumpllaclun halted due 0 scans semamac exxuxs CumU4 cuu cuu c 115 c cum04 cuu spas nsc s 5m Vexslun 5 5 at 33 13 4 2003 Cupyxxgh assaezaaa by Jane 1 Laws L axu c w15c an mgms Resexved See the ne name fax a full cupyxxghc nuclce Luaded lusx c ass cs 43 11D Exap handlex iellu Wurld Coot plugzam successzany executed Scat ee lnsqucclun 932 neads 204 wxlce 343 branches 374 uchex 39 a cams D
arbitrary list of objects, not just strings. And that will require us to 

677.68
writing

change a few things so it can be initialized now with an object. And now when it comes time to flatten this list we want to reduce a string. We want to present produce a print representation. But not everything in the, in the list, is necessarily a string. And we need a way to traverse the list and do different things, for different kinds of things that might be in the list for different types of things that might be in the list. And so there&#39;s a constructing cool for the type of, and, of an object, at run time and this is called, the case construct. So, let me first introduce a let expression here, we&#39;ll let the string that we&#39;re gonna construct, Which is of type string. And that&#39;s going to be initialized to something, and now, it&#39;s going to be a case. And what do we put a case on? Well, it&#39;s going to depend on the kind of thing the item is. So the item in the list could be, it could be different kinds of types and we want to do a different operation depending on what item actually is. So the case item and then the key word is of, and now we have different branches of the case expression for different kinds of things, that could be in the list. So let&#39;s say that if it&#39;s an [inaudible]. Okay, so what this does, is this says that if the item is an INT, then we&#39;re going to rename it to I, we&#39;re going to bind I to that integer and then we can do something with I. And what would we want to do with I? Well, we&#39;d probably want to convert it to a string. So we&#39;ll do I to A &quot;I&quot; And what if in fact. That item happened to be of type string. The items in the list have to be of type string. Well, then we can just use the item itself, as the string representation. And we can do this for other kinds of types. If we had other kinds of types in our system, we could continue to list out other, cases here, and how to convert them into a string representation. But let&#39;s just have a default case here. We&#39;ll say if it&#39;s any other kind of type, which would, which would be covered by having, a branch saying that if it&#39;s, of, type object, we&#39;ll call it O, then we should just abort. And so we should just call the abort function and quit. And that&#39;s our case. It needs to be terminated with a closing keyword called esag, Again the reverse of, of case. And now we can use that [inaudible] we constructed in our little function here. So if, if the next field is void then we&#39;re just gonna return the string. Otherwise we&#39;re gonna return this string incatenated with the flattening out of the rest of the list. Kay. Now there&#39;s a couple of things we have to fix up. We used the I to A method here, which means that list needs to inherit. From the, conversion class A to I. And there&#39;s another issue here, I see. And that&#39;s right here. So, if you notice The, the. The case statement needs to produce a string. Okay, and it turns out that abort dose not return a string, abort actually terminates the program, but it&#39;s type is that it returns an object. And so here we have to convince the type checker, to convince, to accept this, piece of code, and we need to get this branch here to type as a string. So what we can do, and this is ugly, but it&#39;s the way to do it, is we put it in a block, in a statement block. We call abort first, and a gain, that will just terminate the program. And now we can put any string expression we want after that, and that&#39;ll be the, that&#39;ll give a type string to the entire block. So we can just put the empty string here, for example, and that has to be terminated with a semicolon, since this isn&#39;t a block. And we can close, that, with a curly brace. Okay? So this is just something we have to do, to make the type checker happy. And that may be everything we needed to do. So let&#39;s try compiling this. And we have to include the diversion library. And we have one syntax error. So far. And that&#39;s because we forgot to put 

952.19
slide
class Lasc amecks A21 ke Object nek Lasc mku Object n List Lasc ken e 1 sex e n sel zlaccenn scam lec scnng Sum e case ken 0f 1 In Scam Object 123 1 assxcn M esaal 1f usvcld next men sum else scnnd ccaca next zlaccen m n class Haul amecks IO 3an Object lellc Wuxld Coot prugxam successfully executed Scat ee nnsndcusns 49 neads 304 wxlce 69 ccmol cuu ccslc 115 C lasc cl llae la Syntax exxux a at sea llsc cl lane 2 Syntax exxux a 0x neax w Cumpllacluzl halted due 0 lax and 93153 eucxs cum04 cuul ccclc 1 c llsc cl lane 29 Syntax 31101 a at sea w Cumpllaclurl halted due 0 lax and 93153 eusxs CumO4 cuu cu ccclc 1 cl J1 c cl 2 7 Hechud flatten called uka wxunq numbex at am Cumpllaclun aaked due 0 scanc semaauc exxuxs CumU4 cuu ccclc 115 c cum04 lcuu spas 115 5 slam Vexslcn 5 5 mi sassaxy 4 2003 Cupyxxgh lsaaezaaa by Jane 1 Laws lamsecsmscedu all Right Resexved see me nle READHE fax a full cupyngnc nuclce Lcaded lusx 11D Exap handlex lellc Wuxld coon prugxam successfully executed Scat ee lnscxacclun 932 neads 204 wxlce 343 branche a 00131 233 braxlche 374 uchex 39 cum04 cuu ccclc 115 C a ul cl llsc cl lane 9 syntax exxux a at sea ESAC cmpalaucn halted due 0 lax and 93153 eusxs casual assl D
the, semicolon terminator on, on each of our, each of the, each of the, variables 

959.62
writing

that we were introducing in the let. Okay, got to save that. Let&#39;s try this again. And, oops, I didn&#39;t actually manage to fix the syntax error. And that&#39;s because I put the semicolon in the wrong place. Actually, I, I forgot. Variables that are bond in a lent are separated by, by commas. But, the branches of the case have to be terminated by semicolons. So, what I said before was incorrect about using semicolons to terminate lent bindings. It&#39;s just in case branches where we need it, In this example. Alright, anyway coming back to this let&#39;s see if it compiles. And it does. And now let&#39;s run it, And it works. Now of course we haven&#39;t 

1009.69
slide
Class L15 Inherit A21 ace Object next mac until object 1 Law L15 acem e a hex e 1 ae String 1e euang Sum e case acem 0f a In azam String s Object abDIEU M If lsvuld next men 3153 euang cunea next flatten m n class Han Inherit IO maan Object quce af I Insets a a aalken cuu Ills C name we 2 Syntax 31101 an ax neax w Cumpllaclun halted due 0 lax and 93113 EIIDX cum04 cuu caulc 1 C name we 29 Syntax 31101 an ax neax w Cumpllaclun halted due 0 lax and 93113 EIIDX cum04 cuu cu caulc 115 c 1 c c 2 7 Mechud flatten canea mm wrung numbex 0f argum ants Cumpllaclun halted due 0 static eemanuc EIIDIS cum04 cuu caulc 1 C Cum04 cuu am 1155 591 Vexamn 5 5 mi JanJaXy 4 2003 Cupyxlgh assaezaaa by Jane 1 Laxa uamaecameceam All Right Resexved See the tale mam fax a full capyquh nuclce Luaded lusx classlcsimllllbltraprandlex Hells Wurld cooL prugxam successfully executed Scat ee lnscxucclun 932 neaa 204 WXIEE 343 baaaaaea 74 a aaxaoa aaa angle 115 e1 a aa e leac e u lane 9 syntax exam an ax neax asac sempalacaaa halcea aae an lea aaa paxae exeaxa aaaao4 xaaa1 c seals aa e acaa e n ac c u lane 9 syntax exam an ax neax asac sampalacaaa halcea aae an lea aaa paxae exeaxa eaenaa aaa c egalc aa e ace 1 eaeaaa xaaa1 ap
actually exploited the ability to have different types of objects in the list. So 

1016.44
slide
Class L11 Inherit A21 ace Object next List until Object 11 um L11 e a next e n de String 1e euang Scxlnq e case acem 0f a In mam String s Object abuIEU M If lsvuld nexc men nun else cunea next flatten m n class Han 10 damn Object Caulc 1 c c 01n04 cuul spa 1152 591 Vexslun 5 5 at 633131 4 2003 Cupyxxgh assaezaaa by James 1 Laxa L axu c w1 c an Right Resexved See the tale name fax a full cupyxxghc nuclce Luaded 11b Exap handlex iellu Wurld coon pruqxam successfully executed Scat ee lnscxacclun 932 nead 204 wxlce 343 branches 374 uchex 39 emu cam new unseen me 9 sy uzax a m neax Esm Manama naked due m lea and pane cama4 m c egalc aa c acaa c unseen lane 39 max a m neax Esm Manama naked due m lea and pane camo4 m c eagle ae a acaa c ammo up am new spm Vemm 6 5 a Jamey 4 2003 Capyngac aaaegm by Jane a Law uaxaaecameaedm an aeaexved See me me mm m a an cupyngm name Leaded xaumaaa ca 4 m uap aaad ex em Wuzld coo mam eaeeemany execaced Scam ee magnum 990 Head 239 Maze 5 m Mae 4 4 mm D
let&#39;s, let&#39;s do that. Let&#39;s add an integer in here. Type ints and let&#39;s, give it a 

1027.88
writing

number 42. And we can insert it in here. And now we can pass any object, to a knit in the first position. So we&#39;ll just put in 42 right there. And when we compile and run this it just print hello world 42. If we, if everything goes as expected, And it 

1062.85
slide
e Scxlng e e a object abuIEU M If lsvuld nexc than 5611 31 3 ecnng cunea next flatten m n Class Ham IO maxnU owed 4 3 hellu smnd 7 Hells n warld smng 7 mend n 1 In 7 42 newnne smnd 7 n m 1 15 1 L11 7 new L1 E nn lhe 0r new may nnclwurldr new List nncHZr new L1 E nn knewllne flaccenl Wists laf5 lrlnsersla a aalken cuu Ills c spm Vexalun 5 5 mi Januaxy 4 2003 Cupyqum 49904003 by James a Laxu uaadeecemecedm m mgnu Resexved see the tale mam fax a full cupyquhc nuclce Luaded xdex claeexcen43 nwcxap nand ex Hells Wuxld coon pandaan successfully executed Scat W lnscracclun 942 read 2 24 wxlce 443 branches 474 0013 39 4 cum04 cuu caulc 115 C a ul c 1 E C nne 9 syntax exxux a 01 neax Esm Cumpllaclun halted dne 0 ex and 93113 exrux cum04 cuu c caulc 1 C a u1 c 1 E C Jane 9 syntax exxux a 01 neax Esm Cumpllaclun halted dne cu lax and 93113 exrux cum04 cuu c caulc 1 C acul cl cum04 cuu up and spm Vexemn 5 5 mi Januaxy 4 2003 Cupyxxgh manque Dy James 41 L314 uaaneecemecedm All Right Reaexved see the tale 41mm fax a full cupyquhc nuclce Luaded xdex claeexcen43 nwcxap nand ex Hells Wurld coon prugxam eneeeeeznny executed Scat W lnscxucclun 990 neade 249 wxlce 355 branches 492 0013 42 4 Cnm04 cuul cu Caulc 115 C a ul cl antenna
does, And that concludes our little tour of [inaudible]. There are a few features that we haven&#39;t shown in these examples, but you can look in the examples directory, for lots more programs - many more pro grams that will show you all the different ins and outs and details of the other language features as well as the ones we&#39;ve covered here. 

