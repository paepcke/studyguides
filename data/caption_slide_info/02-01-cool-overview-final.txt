4.63
slide
Compilers 1 Cool Overview
Hello, in this and the next few videos I&#39;m going to be giving a overview of COOL the programming language in which you&#39;ll be writing a compiler. Cool is the Classroom 

18.349
slide
Cool Overview Classroom Object Oriented Language Alex mm
Object Oriented Language and the acronym of course, is COOL. And the unique design 

25.04
writing

requirement for COOL is that the compiler has to be able to be written in a relatively short period of time. We only have one quarter, or in some cases, a semester for students to write the compilers. And so COOL has to be implementable quickly. And actually since it&#39;s used primarily for teaching compilers, the number of COOL compilers in the world vastly exceeds, the number of COOL programs. So, there many, many more compilers have been written, thousands of compilers, maybe tens of thousands of compilers have been written for COOL, but probably only some dozens, or hundreds COOL programs. And so, it&#39;s probably the only language, in existence for which this is true, That, that, the number of compilers actually exceeds the number of programs, but it does Tell you about the main design requirement. It&#39;s much more important in COOL that the compiler be easy to write then that it be easy to write programs in. And so there are some quirks in the language, Things that have been done specifically to make it easier to implement where that wouldn&#39;t take away from the, the teaching value of the, of the language. But that would make it inconvenient to use the language on a day-to-day basis as a working programmer. So, what is in the language? Well it&#39;s, we&#39;ve tried to design it so that it will give you a taste of modern notions of extraction static typing reuse through inheritance, automatic memory management. And there&#39;s actually a few more things that we&#39;ll talk about when we come to them. But many things are left out. We&#39;re not gonna be able to put everything in the language and have it be implementable quickly. We&#39;ll be able to cover some things in lectures, but unfortunately, there&#39;ll even be some interesting language ideas that we won&#39;t be able to get to in this class. So the course project is to 

137.28
slide
Cool Overview A complete compiler Cool MIPS assembly language In 5 programming assignments PAs Write a Cool program Lexical analysis Parsing Semantic analysis Code generation Alex mm
build a complete compiler. And specifically you&#39;re going to compile COOL into MIPS assembly language. So MIPS is a real instruction set, It was for a machine 

147.81
writing

that was designed in the 1980&#39;s. And there is a simulator for MIPS that runs on just about any kind of hardware. And so this makes the, the whole project very portable, We can run your compiler, or you can generate MIPS assembly language and then that MIPS assembly language can be simulated on just about whatever kind of machine you have access to. The project is broken up into five assignments. First you&#39;re gonna write a COOL program. And that program itself will be an interpreter to give you a little bit of experience with writing a simple interpreter. And then the compiler itself will consist of the four the phases that we discussed lexical analysis, parsing, semantic analysis and code generation. And all of these phases, I should emphasize are [inaudible] compatible. Meaning that we have separate implementations, separate reference implementations of each of these. And so for example, when you are working on semantic analysis, you will be able to take the lexical analysis, parsing, and code generation components from the reference compiler and plug your semantic analysis into that. Framework and, and test it against the reference components. And so this way if you have trouble with one component or aren&#39;t sure that your components is working very well you won&#39;t have a problem in working on a different component because you&#39;ll be able to test that independently. And finally there&#39;s no required optimization assignment, But we do have some suggestions for optimizations that you can do. And many people have written optimizations for COOL. And so this is an optional assignment if you&#39;re interested in learning something about program optimization. So, let&#39;s write the simplest possible COOL program. And the first thing 

257.029
slide
n M c


257.029
slide
auxn32 xcuul cuxnas xcuul D
to know is that COOL source files, and in the extension dot CL for COOL, and you can use whatever editor you like to write your programs. I happen to use Emacs, you can use some other editor if you like. And every COOL program has to have a class 

274.6
slide
mew mm cm 5 D
called main. And let&#39;s talk about that business in a second. So a class 

280.75
writing

declaration in COOL begins with the key word, class, Followed by the name of the class, So in this case, main, Followed by a pair of curly braces And inside the curly braces is where all the stuff that belongs to the class goes, And every class declaration must be terminated by a semi-colon. So a program consists of a list of class declarations. Each class declaration terminated by a semi-colon. So that&#39;s the structure of a class. And now we need this class to actually do something so we&#39;re going to have a method in this class, and let&#39;s call the method main. In fact the main method of the main class must always exist. This is the method that&#39;s run to start the program and furthermore this method must take no arguments. So the empty argument list for the main method is always empty. And let&#39;s say the main method its body always goes in a pair of curly braces. So the main method always goes inside curly braces. And a class consists of a list of such declarations. And again, those declarations must all be separated by semicolons. So in, or terminated, excuse me, by semicolons. So in this case, we only have one method in the class. But still has to have its semi-colon and now we can say what we want the method actually do so this is the place for the code for the method goes and let&#39;s just have the simplest possible method the one that just event evaluates to the number one. Okay, so [inaudible] an expression language, which means that wherever a piece of code can go, you can put an arbitrary expression, any expression can go there there&#39;s no explicit return statement for a method. It&#39;s just a value of the method body is the value of the methods. So in this case we just put the number one in there, and that will be the value of this method when we run it. So let&#39;s save that. And now we can try compiling this simple program, so how do we compile the compiler is called a COOL c 

403.25
slide
mans class Main mm a r R quce afsllr nsexsla a aalken cuu I c
for the COOL compiler and you just give the COOL compiler a list of COOL source files. So in this case there&#39;s just one file 1.CL hit enter and ooh we got a syntax error so we have to come back and fix that and the error said at or near the 

422.68
slide
chuas cgg 5001c 3 5 mu Mm may we 3 mm a m cmmum mm m m m m yam maan I n Wruce lat llr n era a a aalken cuu IJ c
open curly brace on line three there&#39;s a mistake. And I know what the mistake is, 

429.13
writing

because I&#39;m a competent COOL programmer, at least somewhat competent COOL programmer. Cool methods must declare their return type. So we need to put a type here. And the syntax for the declaration is to put a colon after the name of the method and the argument list, and then the name of a type. And since we&#39;re returning the number one for this program for sorry, for this method we might as well say that the main method is going to return an integer, So save that, Go back to our compilation window and let&#39;s compile the program again. And this time it compiles successfully. And now if we look in our directory we see that there is a new file called 1.s. That&#39;s the assembly code for the program one. And now we could try to run this code. And the, The, the Mitch simulator is called spin, and it just takes a, assembly file to, to simulate, And so we just give it one [inaudible] hit enter and it will run. A whole bunch of stuff is printed out. But as you can see, it says part way down that the COOL program successfully executed, so that&#39;s good, and then afterwards there are some statistics and things like number of instructions executed, a number of loads and stores, a number of branches, those things would be interesting if we&#39;re worried about performance if we were to say working on the optimization of the compiled code, but we&#39;re not doing that right now. We&#39;re just running programs. And we can see if this program works. So the program ran. It terminated successfully. But it didn&#39;t actually produce any output. And that&#39;s because we didn&#39;t ask it to produce any output, If we want to have output. We have to go back and modify the program again. So, so what this program does currently, is that it just returns its value but that, but 

542.17
slide
class Main mun In l a Wruce afsllr nsexsla a aalken cuu I c
nothing is done with that value. It&#39;s not printed out or anything like that. If you 

545.74
writing

wanted to have something printed out in a COOL program, you have to do that explicitly. So there&#39;s a special class built in, a primitive class called IO. And we can declare, what&#39;s called a attribute of this class, it will be a IO attribute and it will be called I, okay and I will be a object that we use to do IO. So now in our, main method, Here we could add a call to out-string, I dot out-string is how we invoke a method. Okay so out-string is a method of the IO class so we use I to invoke that method and then we can pass it a string that we want printed out on the screen. So for example we could say hello world. Okay, And now, we have to decide what to do, with our, with our number one there. And let me show you one more feature of COOL. Let&#39;s leave the one there, and let&#39;s make it part of a statement block. So a statement block consists of a sequence of expressions separated by semicolons. And you can have any number of expressions, and the semantics of a statement block or an expression block is to just evaluate the expressions in order. And the value of the block is the value of the last expression. But now, a statement or an expression block has to be included in its own set of curly braces. Okay, so that now is a valid COOL program so let me just read this for you so the body of the program is a block of expressions. The first one, executes. A out string call to the object I, which is going to print hello world for us. And then the second one evaluates to one, which is the value of the entire of the entire method. Okay, actually I should say it&#39;s the value of the block, okay, and then because the block is the body of the method the value of the block becomes the value of the entire method, So one will be returned from this method call. So let&#39;s save this. Go back over here and let&#39;s compile this again. So, Looks like I 

685.61
slide
cm 5 class Ham 10 hr l uu 7 cxlngl HE u J
failed to save it. Let&#39;s compile this and we see we have a syntax error. And so it 

697.89
slide
class Ham 10 hr l uu 7 cxlngl HE u Wand J 3 cm 5 mic Lug


697.89
slide
carnas cuu angle c Hm mm mm 4 mm a m 2 summmn mm due 9 m m paxae mans 1 10 nr l uu 7 cxlngl HE u a quce ats lr nsersla a aalken cuu IJ c
says on line four, we have a syntax error at or near our closing curly brace. And 

706.08
writing

the problem here is that a statement block, or expression block consists of a series or a sequence of expressions terminated by semi-colons, and we forgot to terminate the last expression in the sequence by its semi-colon, So we have to add that. And now we should be able to compile this, and lo and behold it compiles correctly, and then we can run it. And now we see, oh we got another mistake. So we have an, when the program ran it complained that we have a dispatched void. So that on line four, our dispatch was to an object that didn&#39;t exist. And, you can see the dispatch call right here to I, and it doesn&#39;t exist, 

757.12
slide
cuxnas cuu angle c man has 4 syntax a m am 2 mm due 9 m m paxae mm cums angle c mans am 3 5pm Vemm 6 5 a Jymaxy 4 was cupyngm mamas by Jam R Lam usuagu mc edm m mm named See me me mm m a m Cupyqum name mm mm mm mmka 3 1 mum 9 van 5m 7 magnum 344 mm 20 Wm 20 25 mm 7 cums D class Ham 1 10 wismuwuem a
because, in fact, we forgot to allocate an object for I. So here we declare I to be of type IO, but that doesn&#39;t actually create any objects. That just says that it creates a variable name I but I doesn&#39;t actually have a value. So if you want I to actually have a value, we have to initialize it to something. So we can initialize it to a new IO object. And new here, is the way you allocate new objects in COOL and new always take a type argument so in this case were creating a new object in type IO and were assigning it To this object i. And notice here that I is a, is a, is what would be called a field name in Java. It&#39;s what we call an attribute in COOL. So, so these are the data el, the data elements of the, of the class. And so the class can have both of names of things that are so, attributes or fields that hold values as well as methods that can perform computation. [sound] Let&#39;s save this and switch back. And now we&#39;ll compile this again. So and it still 

828.3
slide
class Main l m 7 new 10 Ealnt n unci crlngtnuellu Wurldln Wruce afsllr nsersla a aalken cuu I c n n cuxnas cuu angle c men has 4 syntax a m um 2 cmnmm mm due 9 m and paxae mm mans u angle c cums am 3 5pm Vemm 5 5 a Jymaxy 4 was cupyqum Jasuizaas by Jam R Lam usuagu mc edm w mm named See me me mm m a m Cupyqum name was mm mm gum mmka 3 9 van 5m 7 magnum 344 mm 20 Wm 20 25 mm 7 mans
compiles. And now we can run it. And now it runs, and low and behold, as you can see down there third line from the, the top, it prints out hello world. And that looks a little bit ugly because the, the successful execution message is on the same line as our hello world message. So let&#39;s fix that. Let&#39;s come back over here. And in our string here we can add a new line. Okay at the end of the string, so 

857.51
slide
cuxnas cuu angle c man has 4 syntax a a hen cmnaum mm due 9 m m parse mm cums angle c cums 91 3 5pm Vemm 6 5 a Mum 4 was cupyqum 399mm by Jam R Lam mmeumumdm m mm named See me me mm m a an Cupyqum mm mm mm mm umbxmmmm 3 1 9 van 5m 7 mmnmm 344 mm 20 Wm 20 Mam 25 mm 79 cums angle c cums up am 3 5pm Vemm 6 5 a Many 4 was Cupyqun mum by Jam R Lam w mm named See me me mm m a an Cupyqum mm mm mm mm umbxmmmm gem wuxldlcoon pmm magnum mama 5m W mandamus 226 mm 4 Wm 33 Manchu 44 mm m many D class Ham 1 10 7 new 10 xan n l unc7 crlngl lu Wurld
backslash N is how you write a new line character in the string. Save that, come back over here let&#39;s compile. So if you don&#39;t know Unix bang will repeat the previous expression the previous command that began with the same prefix that you type after the bang. So I want to run the last command that began with C which is to compile and then I want to run the last command that began with S which is to run spin. And now we can see there it is all nice hello world is on a line by itself. Let&#39;s continue now, let&#39;s [sound] clear all this out [sound]. So let me just show you a few variations on the same program. What I&#39;m going to do here is just rewrite it in a couple of different ways. So I just illustrate a couple of features of 

906.11
slide
class Ham 1 m 7 new 10 maan In l uu 7 cxlngl lu Wuxld nll J Wruce lat llr n era a a aalken cuu IJ c
COOL and get you more familiar with the syntax, and also just show some alternative ways to do the same thing. So you know this, this. A block here of, of expressions is kind of a clumsy way to, to implement the Hello World program. So let&#39;s get rid of that. Let&#39;s get rid of the, the block. Let&#39;s get rid of the one here at the end. Okay, let&#39;s just make the statement body a single expression again, and, and now the problem we&#39;re going to have is that the types won&#39;t match. But just to illustrate that, let me show it to you so let&#39;s do COOL C of one dot CL, and you&#39;ll see here that in complains that the inferred return type of the IO of the method main does not conform to the declared return type INT. So coming back over here, the, to the program, The, the compiler figured out that this expression, 

963.839
slide
class Ham l m 7 new 10 n u cx nglnne u Waxld nny cux135 cuu cumin c a Mama mm type 10 a mm mm due m mg m m deemed mm type 1m cmumm mm due 9 mm mam mm many D
I dot out string, yields an object of type IO. So it returns the i object as the results evaluating this expression. And that does not match the type it. And so naturally, the compiler says, hey, something&#39;s wrong with the types. Well, that&#39;s easily repaired. We can just change the return type or the main method to say it returns something of type IO. So let&#39;s go back over here and see if that now 

987.68
slide
class Main l m 7 new 10 malnl uuc7 cx nglnuellu Waxld nnx quce afsllr nsersla a aalken cuu I c carnas cuu angle c J Mama mm type 10 a mm mm due as mg m 9 mm type 1m cmnmm naked due 9 mm mam canny
works. So, we compile the program. And then we run spin on the output, and yes, everything still works as expected. Now, We don&#39;t have to be so specific about the 

1001.61
slide
cuxnas cuul angle c M Mama mm type 10 a mm mm due as mg m 9 mm type 1m mum mm m 9 mm mm many mu an Even an mm many eagle c cums sm 3 5pm Vemm 5 5 a gin my 4 was 399mm by Jam R Lam museummdm w mm named See me me mm m a an Cupyqum mm mm mm mm umbxmmmm sens um mm mm magnum mama 5m W mmncmm 224 mm 4 Wm 33 44 mm 306 many D class Main l m new 10 mm ol mngmnwuem wand n Wruce afsllr nsersla a aalken cuu I c
type over here, since we&#39;re not actually using the result of the method body for anything. I mean, the program just exits once it prints the string. We could have allowed ourselves more flexibility here. We could&#39;ve just declared the result type of main to be of type Object. So Object is the root of the class hierarchy in COOL. Every other class is a subclass of Object. So let&#39;s come back over h, let&#39;s save this first. And then we can come back over to our compilation window. We can compile it. 

1034.39
slide
class Main l m 7 new 10 mm mum mugmnwuem wand n Wists afsllr nsersla a aalken cuu I c cuxnas cuul angle c M Mama mum type 10 a mm mm due as mg m 9 mm type In cmnmun mm due 9 mm many mu my Even an mm cumas xcw eagle c mans sm 3 5pm Vemm 5 5 a Jymaxy 4 was cupyqum 399mm by Jane R Lam museummdm 11 mm named See me me mm m a an Cupyqum mm mm mm mm 43mmmp nm ex Hem um mm mm magnum mama 5m W mmncmm 224 mm 4 Wm 33 44 mm 306 cumas xcw
And we can run it and it still works. So now another thing we can do if we want, is 

1042.54
slide
cuxnas cuul eagle c Hm M Mama mm type 10 a mm mm due as m m m deemed mm type 1m x m 7 new 10 Cumnacxun mm m 9 mm mm mm may mugmnwaem mum w many mu an Even an mm muggy eagle c cums sm 3 5pm Vemm 6 5 a Jimmy 4 was Cupyngnc 399mm by Me R Lam mmeumumdm w mm named See me me mm m a an cupynm name mm mm mp an gem mm coon pzuqxam executed 5m W mmumm 224 mm 4 Wm 33 momma 44 mm 306 caans cuul caulc J cl cuxn15 cuul p spin 3 5pm Vemm 6 5 a Mum 4 was cquXxgnc mums by Me R Lam usmgmmc edm m mm named See me me mm m a an cupynm name xmmmm mp an dang mm com mm successfully executed 5m 7 magnum 224 mm 4 Wm 33 momma 44 mm 306 cumas xmw D Wruce afsllr nsersla a aalken cuu I c
we could observe. Here that this attribute that we declare, this field I isn&#39;t really necessary. Here we, we allocate, you know we have a special name I when the main object is constructed to run the program, a new [inaudible] object is allocated to I and then that gets used in the main method. We can actually just do all of that inside the main method itself by just allocating a new [inaudible] object right here and then calling out string on that object. Alright, So this should also work. And let&#39;s check it out. So it compiles. And lo and behold, it rots. Alright, So 

1092.29
slide
mans veg class Main mammmecc new onguucimmmem wand n r R quce afsllr nsersla a aalken cuu I c
coming back over here let&#39;s illustrate one more, or a couple more things that we 

1095.52
slide
cuxnas cuu cu angle c cumas v 5m 3 5pm Vemm 6 5 a Jymaxy 4 2003 Cupyxxgm 399mm by Jam R Lam uamecmumdm m mam named See me me mm m a m Cupyqum name mm xmmmm mmka mm mm cooL pzuqxam magnum mama 5m W mmnmm 231 mm 3 wxxce 33 43 mm m amas D class Ham hm new wand n mam L Wruce ats lr nsersla a aalken cuu IJ c
could do. So, we could also say that [inaudible] inherits From IO. So we have 

1103.62
writing

to have the IO functionality somewhere in order to call the out string method. So we have been doing that by creating a separate object of type IO. But now we can say well just the main object is itself. And something that has all the capabilities of IO by inheriting from IO. And if you&#39;ve seen any [inaudible] language before this will be a familiar concept. So main here gets all the attributes and methods of IO, in addition to whatever attributes and methods of its own that it will have. And now Instead of, of having to allocate a new IO object in order to call out string, we can just invoke it on self, Which is the name of the current object when the main method runs In other languages self is called this. Okay, and so let&#39;s we saved it, so let&#39;s go over and compile this. So it compiles, it compiles and, and it runs, right? So last example here, we don&#39;t have 

1164.69
slide
class Main lunatic IO maxnl bjecc selzgunciscx nglnuellu WDrJd nny Wruce afsllr nsersla a aalken cuu I c cuxnas cuu cu angle c cuxn s cuu v am 3 Veralun 6 5 a ganaaxy 4 2003 Cupyrlgn 199072003 by James R Laxa lardseca w ac eduy All Flynn Resexved See the ills 0 a a cupyquh Luaded xasx c ass c5 43 b cxap hand ex Bella mulla COOL pxugxam successza11y exaggced Scan 77 237 39 33 nche 43 Jua carnas cuu veg angle c cuxn35 cuu
to name self actually in this dispatch. There&#39;s a feature that allows us to call a 

1171.28
slide
cuxnas cuu cu angle c cumas m 3 5pm Vemm 6 5 a Many 4 was Cupyqum 399mm by Jam R Lam 11 mm named See me me mm m a an Cupyqum mm mm xmmmm umbxmmmm 33m mm coon mm magnum 5m W mmucmm 231 mm 39 wxxce 33 Mam 43 mm m angle c cums am 3 5pm Vemm 6 5 a Many 4 was gamma by Jam R Lam w mm named See me me mm m a an Cupyqum mm mm mm mm umbxmmmm gem mm cooL pzuqxam magnum 5m W magnum 354 mm 27 wxxce 22 Mam 23 mm 71 cumas xcw D class Ham 10 hm Immunimmwaem wand n mam L
method without explicitly naming the object on which it&#39;s dispatched and defaults to self, so if no object is named in a dispatch then it&#39;s just a dispatched self. So this should also work. [sound], And indeed it does. So that concludes our 

1190.29
slide
class Ham 10 hm gugcmwaem mum w mam L Wists Isis lrln era a a aalken Cuu IJ c cuxnas cuul cu angle 2 c amas mw v m 2 52m Vemm 6 5 92 Jannaxy 4 2003 cupyngm 299mm by Me R Lam m mm named 22 me 2222 mm m a an Cupyqum mm mm mm mm mp an Hem mm cooL mm magnum 5m W magnum 227 mm 39 Wm 32 52mm 43 mm m cumas cm angle 2 c cums m 2 52m Vemm 6 5 92 Jmuaxy 4 was 299mm by Me R Lam m mm named 22 me 2212 mm m a an Cupyqum mm mm mm mm mp an mm mm cm mm magnum executed 5m W hummus 254 mm 27 wxxce 22 52mm 23 mm 71 cumas xcw angle 2 c mans
first example. In the next couple of videos we&#39;ll look at some more complex examples of COOL programming. 

