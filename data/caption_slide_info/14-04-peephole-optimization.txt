3.929
slide
Compilers 1 Peephole Optimization
In this short video, I&#39;m going to say a few words about a variation on local optimization that applies directly to assembly code called Peephole Optimization. The basic idea here is that instead of optimizing on intermediate code 

19.019
slide
Peephole Optimization Optimizations can be directly applied to assembly code
we could do our optimizations directly on assembly code And people optimization is one such technique. The peephole is, stands for a short sequence of usually 

29.32
slide
Peephole Optimization Optimizations can be directly applied to assembly code eephole optimization is effective for improving assembly code The is a short sequence of usually contiguous instructions The optimizer replaces the sequence with another equivalent one but faster
continuous instructions. So, the idea is that we have our program. We can see, we 

33.57
writing

can think of it as a long sequence of instructions and our peephole is some window onto this program. So, if we have a peephole of size four, we can think of ourselves as staring through a small hole at the program and all we can see is a short sequence of four instructions and then we can optimize that sequence. So, then we can slide the peephole around and optimize different parts of the program And the, what the, what the optimizer will do is it will, you know, stare at this short sequence of instructions and if it knows a better sequence it will replace that sequence by the other one and then it will repeat this as I said. You know, applying other transformations to, to possibly the same or other parts of the assembly program. So, people optimizations are generally written as replacement 

79.08
slide
Peephole Optimization Write peephoie optimizations as repiacement rules i1 in hi jm where the rhs is the improved version of the lhs Mex mm
rules. So, the we&#39;ll have the window of instructions on the left. So, it&#39;ll be 

82.63
writing

some sequence of instructions and we&#39;ll know some other sequence of instructions that we would prefer on the right. So, if we see this instruction sequence on the left, then we&#39;ll replace by the one on the right-hand side. So, for example, if I have a move from register b to register a and then I move back from register a to register b well, that&#39;s the second move is useless, can, can just be deleted as a way to replace this two instruction sequence by a one instruction, instruction sequence. And this will work provided that there&#39;s no possible jump target here. So if, if there&#39;s no possibility that the code would ever jump to this instruction then that instruction can be removed. Another example, If I add i to the register a, and then I subsequently add j to the register a, I can do a constant folding optimization here, and combine those two add two additions into one addition where I add the sum of i = j to the register A. So, many but not quite all 

145.37
slide
Peephole Optimization Many but not all of the basic block optimizations can be cast as peephole optimizations Example addiu a Sb 0 a move Sa Sb Example move Sa Sa two together eliminate addiu a Sa 0
of the basic block optimizations that we&#39;ve discussed in the last video, can be cast also as peephole optimizations. So, for example if we are adding zero to a 

157.579
writing

register and we&#39;re storing it in another register, well, that can be replaced by a register move. If we&#39;re moving a value from the same register to itself so this is like a self-assignment, well, that instruction can just be deleted, replaced by the empty sequence of instructions. And together for those two instructions would be those two optimizations, excuse me, would be able to eliminate adding zero to a register. So, first this would get translated into a move from a to a. And then the move from a to a would get deleted. And as this little example illustrates just like with local optimizations, people optimizations have to be applied repeatedly to get the maximum effect. I hope this simple 

202.62
slide
Peephole Optimization Many simple optimizations can still be applied on assembly language optimization is grossly misnamed Code produced by optimizers is not optimal in any reasonable sense improvement is a more appropriate term Mex m
discussion has illustrated for you that many optimizations can be applied directly to assembly code and that there&#39;s really nothing magic about optimizing intermediate code. So, if you have a program written in any language, source language, intermediate language, assembly language. It makes sense to talk about doing transformations of programs written in that language to improve the behavior of the program. And it&#39;s also a good time here to mention that program optimization is really a terrible term. The compilers do not produce optimal code and it&#39;s purely an accident if a compiler were to somehow generate the best possible code for a given program. Really, what compilers do is they have a bunch of transformations that they know will improve the behavior of the program. And they&#39;ll just improve it as much as they ca N. So, really what program optimization is all about is program improvement. We&#39;re trying to make the program better but there&#39;s no guarantee that we will reach the best possible code for a given program. 

