3.97
slide
Compilers 1 Cool Example
Welcome back, In this video we&#39;re going to look at another example of cool programing. This time let&#39;s move beyond the simple hello world kind of examples 

19.119
slide
cuxuza cuu D carnag xcuu1
and on to something more exciting, say, the ever popular factorial function. So, in order to write factorial, we&#39;ll need to open a file, which we can write some code. 

29.96
slide
cmza 0an D
Let me start that. And recall from last time that every cool program has to have a 

36.32
writing

main class and the main class is required to have a main method. And we don&#39;t care what the main method return, so we&#39;ll just have it return something a type object, and then we&#39;ll just fill in a skeleton here on the file. And, so now we&#39;re ready to write some codes. So what are we going to have the main method do? Well, before we can actually write factorially, before we can get to the guts of this program, which is actually not very difficult. We need to talk about IO some more. Because we&#39;re going to need to be able to, read and write, numbers. We need to be able to read numbers from, the, the user who&#39;s running the program, and print them back out. So let&#39;s just review little bit about IO, also. In order to invoke the IO functions, we need an IO object. And one of the IO functions is something that prints out a string. So let&#39;s just, write a program that we already know how to do, just to confirm that we remember that. And, we can compile this program. And it 

97.409
slide
class Hay maan chm new 10 0uc75 x 1 1 1l l gummy
should just print one. And, let&#39;s see. Indeed it does. Okay? So it prints out the number one. And so now, let&#39;s come back here and let&#39;s talk about how to do input. 

113.11
slide
class Object new IO uuciacxlngl uVl Wl quce lafsllx Jsexsla a aalken cuu facr C ccmog cuu caulc dcc c1 cum09 cuul sum zdcc s 5pm Verslun 6 5 at January 4 2003 Cupyxlghr 399072003 by Jane u Lam udxusecsmsceduy All Right Resened See the idle mum in s all cucyngnc ucnce Luaded lust c ass calmllllb Exap handler 1 Com cmdxdm successfully executed Scdcs ee lnscmccxun 237 hesds 39 33 scmches 43 same 304 csmcs xcss1 D
So, instead of just printing out the number one, let&#39;s print out a strain that 

117.7
writing

the user types in. So, ins-, in here, we&#39;re going to read a strain. And in order to do that, we need an IO object because there is another function, another method, called in-strain. Okay. And so this will renew this string. And return to string. And to make sure that we get the nice output let&#39;s concatenate on to that string a new line. So, this is just to. When it prints this string back out it will be printed on i ts own line. So, let&#39;s try compiling this, And steak. It compiles, And now we can run spin. Remember the bang command in UNIX runs the previous command that began with the same letters. And now the program runs and it waits. Cause it&#39;s waiting for me to type something. And if I type it type in one it prints back one and if I type in 42 it gives me back 42. And so now The next thing we need to talk 

181.15
slide
class Hay uaaeu Object mew IO Duciacxlngk haw 10 lniscxlnqll ceuca mm quce afsxaf usefs a a aaakee ceel facc cl See me fale mum fur a full ceeyngnc necace Leaded usf class csllune nap uaedlef l Com cfedfase successfully executed Scat ee lnscmcclun 23 read 39 erEE 3 cefuad cuu ceelc fac cl Cunld nu eeee n1an flle fac cl cuu ceelc fac c CDInOE cuu se spun facc s 5pm Verslun 5 5 ef January 4 2003 Cupyllth ldsoezaaa by Jane u Lam L azn c w1 c ed 11 all Right Resened see me fale mum fef a full ceeyfagnc nuclce Leaded Inst c ass c1343 llb Exap handler branches as Dchex 304 l l COOL cfegfae successfully execuced Scat ee lnscmcclun 533 xead l22 avarice 24 bxanche 32 ucher 290 Cum09 cuu spun facc s 5pm Verslun 5 5 ef January 4 2003 cecyfagnc ldsoezaaa by Jane u Lam L azn c w1 c ed 11 all Right Reserved see me fale mum fur a full ceeyfagnc nuclce Leaded lust c ass c1343 llb Exap handler 42 42 com cfegfae successfully execuced Scat ee lnscmcclun 535 xead 323 megs D avarice 24 bxanche l2 aemea 293
about is how to convert strings into integers, because if we&#39;re going to do a factorial, we want to work on integers and not strings. And at the moment we&#39;re just reading and writing strings. So, there is a library written in cool that does conversion between integers and strings. And we&#39;re going to give the main class 

199.69
writing

here the functionality of that class. Which is called A2I for ASCII to integer. And that defines a bunch of methods, that can convert between strings and integers. So let&#39;s add those, commands in here. So here, here&#39;s our string. That we&#39;ve read in. And what we want to do now is to, convert this into an integer. So let me just add a couple of parens here. So there&#39;s our string, okay? And now we&#39;re going to invoke. On that the method I&#39;m sorry we&#39;re going to call on that the function the method, A to I. Okay? And let&#39;s just double check here that we&#39;ve got friends in the right place. So that&#39;s the argument to A2I. Now, we recall that when we have a dispatch to a method and it&#39;s just sitting by itself with not object, it&#39;s dispatched to the self object. And the self object is the object of the current class that we&#39;re in. In this case the main object, which has inherited the A2I methods, And so the A2I functions should be defined in there. Now we have an integer. And we can do something with that integer if we like. So, let&#39;s add some more [inaudible] here and let&#39;s just say we add just one to the integer. Okay. And then once we&#39;re done with our integer. Whatever operation it is that we want to do with the integer we need to convert it back to a string so that we can print it out. An there&#39;s an inverse function I2A that will do. So, I don&#39;t know if we have all the parens in the right places at this point. So, let&#39;s just check. Yes. That looks like that should work. So this will, read in a string, convert, convert it to an integer, add one to it convert it back to a string, concatenate on a new line, and print it out. Now let&#39;s see if all that actually works, so let&#39;s run the compiler and we have a problem here. It says that we have 

323.65
slide
Scat ee lnscmcclun 231 zead 39 erLE 31 branches as ucher 104 cum09 cuu caulc fans 0an nu eeen 111an rue fame eemod cuu caulc scrucl cum09 cuu e mn 3 32 5pm Verslun 5 5 at January 4 2003 Cupyqum nsgoezaaa by James a Lam udm e m e eduy All Right Reserved see me rue mum at a full cupyquhc nenee Luaded lust c ass calmllllb Exap handler e1 Hem lnhexlc A21 maan Object new 10 uuciacxxngl123K321KLnEw 101 1niscxlnqll 3 Deened mm M a coon 20qu deee znny executed Scat ee lnscmcclun 533 233d 322 pence 94 bxanche 32 ucher 290 eemag cuu em 3 32 spm Verslun 5 5 at January 4 2003 Cupyqum ngdoezaaa by James a Lam udm e m e eduy All Right Reserved see the rue mum fax a full cupyquhc nenee Luaded Insr classlcsimllllb Exap handler 42 42 COOL pxuqxam deee znny executed Scat ee lnscmcclun 535 xead 323 Ware 4 bxanche 32 aecne 2g cum09 cuu c caulc de e1 facc c c e Manx ennenc rum en nndenned e A21 nemneuen halted due 0 static endnne struts emcee quce af lx nsexsla a aalken cuu list c
an undefined class A to I. And the reason is, we didn&#39;t supply the code for A2I. So if we look in our directory here, we&#39;ll see I&#39;ve already copied in the class file 

333.69
writing

for A2I. And I encourage you to go and look at that code. It&#39;s actually interesting code to see how the conversions are written in COOL. But now we need to talk about how to compile a program that uses a library, And the way you do it is very simple. You just list all the class files on the command line when you call up the compiler. And it will read them all in and treat them as a single program. So in this case we compile, compile fact together with A2I. And that complies. And then we can run it. [sound]. And now, if I type in three, it prints four. And if I type in one, it prints two. And so the program seems to be working. And now we&#39;re almost ready to write our factorial function. So what do 

378.46
slide
c1e neee neenc A21 menu Object knew 10 uuciacxlngl123 321 k haw 10 lniacxlnqll 1 3 Iceece mm 1 quce lain lxlJsexala a aalken cuu lfacr c 233d 23 erLE 24 bxanche 325 uchex 2 3 cuu c cee1c fac c fac c c e Manx emenc rum en undefined c e e21 semneceen halted dde ce cecec enencec struts cuu 1 ecee c facc c fac c fac cemad cuu caulc ecc c1 ecee c cum09 cuu pm zecc 5pm Verslun 6 5 mi Jemer 4 2003 eeyngnc Banana by James a Lam uezd c we c eduy A1 mam Reserved see me ne mum fur e full ceeyngnc necece Leeded lust c a c 343 llb Exap handler 3 4 COOL pxuqxam dcce zeny executed Scec ee lnscmccxun 2552 zead 575 wrlce 313 branches 575 ucher no as Cuzn09 cuu em zecc 3pm Verslun 5 5 mi Jemer 4 2003 Cupyllqm adsoezaos by James a Lam uezd c we c eduy n Right Reserved see me zele mum fax e full ceeyngnc necece Leeded Insr 1b Exap handler Door pxuqxam dcce zeny executed acec ee lnscmcclun 2437 zead 535 313 branches 5 ucher no as cemce D
we want to do in factorial? Well, we want to do something other than just adding 

381.9
writing

one. Instead, we want to call, our special function factorial. So let&#39;s insert a call to factorial in here. Okay, and let&#39;s get rid of the plus one. And then let&#39;s check that we have all the parens that we need. So we need to close off the, the A2I call, the factorial call, The I2A call. And then that last one should be the out string call, And it is, Okay. So now we can add a method fact to this class, And fact is gonna take an integer argument. So we need a parameter here, And it&#39;s type is in force. And the whole thing is gonna return an integer. And then we have body of our function, And probably a good idea here, just to make sure that we got this much right, to do something simple. So let&#39;s just try to make a function that returns one more than it&#39;s argument. So this will do exactly the same thing that we had before and let&#39;s just confirm that, that is working. So EW compile with the A2I 

444.28
slide
233d 25 Weaces 94 bxanche 325 aecnex 2d cuxn09 cuu c cee1c fac c fac c Class Man amencs rum an class A21 Cumpllaclun halted dde ce ecacac senancac struts cuxn09 cuu 1 acea c1 fac c fac c fac cemad cuu caulc acc c1 acea c cum09 cuu spam zacc s 5pm Verslun 5 5 at January 4 2003 neeyxagnc assaezaaa by Jane 11 Lam 11ams cs wasc edu1 All Right Reserved see me tale mum fur a full ceeyxagnc necace Leaded Inst c ass c5343 llb Exap handler class Haln whence A21 eaaeu Object new IO uuciarJYIQUQBKfacc DEW 10 1n7 cxlng 11111 ceecawmvvn 1 acha Int xac a an 3 4 cooL pxuqxam successfully executed Scacs ee lnscmcclun 2552 zead 575 mmces 313 branches 575 06113 no 55 cum09 cuu spm zacc s 5pm Verslun 5 5 at January 4 2003 neeyngnc nsgoezaos by Jane 11 Lam 11ams cs wasc edu1 All Right Reserved see me tale mum fax a full ceeyxagnc necace Leaded lusr c ass c5343 11b Exap handler a 2 cooL pxuqxam successfully executed Scacs ee lnscmcclun 2437 233d 555 Weaces 313 branches 552 06113 no 55 maece xaisxaxxasexs a a esakea cee xzacc c1 ceaaas xcee1 cl
library and now we have a syntax error. And we see that I forgot the closing semicolon here for the method. Remember the, the, class body is a list of methods, and each method is terminated by a semicolon, Must try compiling that again. Now it compiles. Let&#39;s run it. We type in four gives a spec five. Alright, So looks right we&#39;re ready now to actually right the code for factorial. And this is gonna be anti climactic because it&#39;s actually a very simple code if we write it 

478.63
slide
class Hay lnhexlc A21 memu new IO uucigcxl IQUQB fach321K new 10 1n7 cx1 1g Object U 1 cencdct n l factll Inc In cuanE cuu epm 3 32 5pm Varnish 5 5 at January 4 2003 epyngm adsoezaoa by James a Lam udmeeeemeeedm All mam Resened See me rue mum at a full cupyzth nenee Leeded lust classlcsimllllb Exap handlez COOL pxuqxam edeeeeemny executed Scat ee lnscmcclun 2437 zead 535 wrlce 313 branches 5 ucher no 32 Cum09 cuu cuu Caulc de e1 a ul c ewe nee n synch enex a Dr near w emneuee halted due 0 lax and gene errur Cum09 cuu v Caulc fact c acul c Cum09 cuu v eem 3 32 3pm Varnish 5 5 at January 4 2003 Cupyllqh adsoezaaa by James a Lam udmeeeemeeedm All mam Reserved See me rue mum fax a full cupyqum nuclce Luaded Inst c ass calmllllb Exap handler 4 5 COOL pxuqxam edeeeeemny executed Scat ee lnscmccxun 2636 zead so wrlce an bxanche em ucher an a eemag D
recursively. So let&#39;s do that. So how&#39;s that going to work? Well, everybody knows the definition by Hardy Hope. If I is equal to zero then the factorial of zero is one. And we have a keyword there then one, otherwise the factorial is going to be I times, the factorial of I minus one. Right, and then if statements in [inaudible] always end in the keyword [inaudible] so it&#39;s an if then else [inaudible] construct. And that is actually the entire definition. So now we should have a program that actually computes factorial, it compiles, so now 

525.179
slide
spm 3 32 5pm Verslun 5 5 at January 4 2003 Cupyquh adsoezaaa by Jane u Lam udmsecsmseedm m mam Reserved see me rue mum fax a full cupyquhc nuclce Luaded Insr c ass calmllllb Exap handler class Hem lnhexlc A21 esdeu Object new IO uuciarJYIQUQB fach321K DEW 10 1n7 cxlng U l l cuncacl n l 3 n 2 cooe creases successfully exececed zscclss Inc Inc Scecs ee ssscceccsses 2437 s d a ceee else s scclseal elm sesds s 535 ccsces 313 exsscees 531 cecsec no u cum09 cuu cuu caulc fact c a ul c ewe nee n synch enex an at near w Cemeneuee halted due 0 lax and parse errata cum09 cuu v caulc fact c a ul c cum09 cuu s spm 3 32 5pm Verslun 5 5 at January 4 2003 neeyndm nsgoezaos by Jane u Lam udmsecsmseedm 11 name Reserved see me ne mum fax a full cupyquhc nuclce Luaded Insr classlcsimllllb Exap handler 4 5 com pxuqxam successfully executed Scat es lnscmcclun 2636 233d 50 avarice an bxanche sac ucher an as cuxn09 cuu c caulc fact c deed c Weece xdisxssxesess d d esskes ces xzdcc c cssnadssxcse1 vs
let&#39;s run it. So factorial of three is six. And factorial of six, is 720 and that looks right. And if we try it one more time with a bigger number, we get a, we get a large number, we think that&#39;s probably correct. And so, anyway our factorial function, is working. So, now let&#39;s come back here, and just as an 

550.519
slide
clsss Marl nuencs A21 usmu ocsecc mew m1 suciscfmdmd 1fscc 1m 1 haw m1 1n7 cxl 1g 11111 csucec1 nm 1 mm m1 m sf u a1 men 3 else s fsccusn fl quce sfsxlf usefs s d sddkeu cssl fdcc cl Lssded usf cldss csl43 lls cfec udndlef 3 5 Com cfsgfem successfully executed scscs ee lnscmcclun ausl zead TJU wrlce 375 bxanche 732 ucher ll 33 Caxn09 cuu spm fdcc s 5pm Verslun 5 5 sf January 4 2003 Cupyllth lssoezaos by Jane u Lam 1ldfus cs msc edu1 All Right Reserved See me flle mum far 3 full cupyflgnc usclce Lsdded Inst c ass c5343 11b Exap handler 5 21 COOL cfsgfem successfully executed Scscs ee lnscmcclun 4650 233d 30 erLE 555 bxanche 3090 ucher 1936 cuu spm fdcc s spm Verslnn 5 5 sf January 4 2003 Cupyllth lssoezaos by Jane u Lam 1ldfus cs msc edu1 All mgncs Reserved See cue flle mum far 3 full cupyflgnc usclce Lsdded Inst c ass c5343 11b Exap handler la 3523500 COOL pruqxam successfully execuced Scscs ee lnscrncclun 7153 233d laud erEE 3 bxanche 3540 ucher 3377 csmcs D
exercise, let&#39;s rewrite this code iteratively. So instead of using a recursive function, let&#39;s write it using a loop. And in order to that [inaudible] gonna get rid of that code. What are we going to need? Well, we&#39;re going to need 

566.239
writing

an accumulator here. We&#39;re going to need a, a local variable that we can use to accumulate the results of the factorial computation. And the way you declare local variables in [inaudible] is with [inaudible] Statements, or naudibl expressions. So we&#39;re gonna have, let&#39;s call this, variable fact, for the, result of factorial. And notice here that I can have a variable that has the same name as the function. And the programming language, [inaudible] will not get confused about that, Because variables and functions, play different roles. So we&#39;ll have the factorial fact, excuse me, it&#39;s of type Int, and we do initialize it to one. Alright, so that multiplication will work. I think that the default for integers is to be initialized to zero and that would not be good if we&#39;re going to be multiplying up fact with other with other numbers. Alright, so then the, a let has two parts. It has the variable or variables that you are declaring. This could actually be a list of variables. We&#39;ll only have one this time. And then it has a body. The, the expression or the computation in which the fact variable is available. And what do we want to do? So, I think we&#39;re gonna need to have this be a statement block &#39;cause we&#39;re gonna need to have more than one statement in the sequence. And we&#39;ll see why in just a minute. But then we wanna have a loop. And so what is our loop going to do? Well, we&#39;re gonna say while I is not equal to zero. What do we, and what do we need to do the opening for the loop body the opening keyword is called loop. [sound]. And now, I think we&#39;re going to need another statement block here. So let&#39;s open up a block. We&#39;re gonna probably need to do more than one thing. The first thing we want to do is we want to have fact. Be fact times I, so we know that I is not zero so we need to multiply the current value of I into fact to accumulate the result and then we want to subtract one from I and notice that the assignment statement in cool is this backwards arrow. That&#39;s how you do assignment. It&#39;s also how you do initialization. So, initialization and assignment look the same. Then we can close off our statement block. Okay, so the body of a while loop is always a single expression. In this case, that expression is a block that consists of two statements. [sound] And then we can close the loop. And the closing for a loop is the pool key word. And then now we&#39;re in a statement block, so this has to end with a semicolon. Notice the statement block up there from the let, And now we want the result of the let block, or the let expression, to be factorial. So whatever the, whatever we got out of the while loop, whatever we computed in the while loop, we want that to be the result of the entire let expression. [sound] so that&#39;s the last statement of our blog. Remember the last statement of a statement blog, is the value of the blog. The body of the led is the, the result of the led, so fact will also be result of the whole led statements, it&#39;s just the result of the statement blog. And since the body of the, factorial method itself is just the led expression, fact will be the result of the whole thing. And so this, if we&#39;ve written, haven&#39;t made any mistakes, should be an iterative version of factorial. So, let&#39;s compile this. And amazingly it complies on the first try. And now let&#39;s run it. [sound] And whoa! It actually works. So we got six. And let&#39;s just do one more test, to see that, to convince ourselves that, things are working reasonably well, and they are. Now, let me just point out, one, common, mistake, that you can easily make, and, that I make when I haven&#39;t written cool programs for a little while. If you&#39;re a C or programmer or a Java programmer, you might, think about, writing assignments, like this. So I just use the equal sign to write assignment. That looks completely fine if you&#39;re, if you&#39;re familiar with those languages, or used to programming in those languages. And now, let&#39;s see what happens when we try to compile this. Oh, it compiles just fine. And then what happens when we try to run it. Well it runs [inaudible] input so let&#39;s give it input and. Then we see that we&#39;ve run out of heat. And that looks like an infinite loop. So we&#39;re going around and around the loop And consuming memory for some reason. And we&#39;ll, we &#39;[laugh] get to that much later in the class. Why, why this loop actually ends up consuming memory. But, clearly, we don&#39;t have enough memory, in the loop, and, and eventually we run out. And so, so that&#39;s a sure sign Of an infinite look. So what is going on here? Well the thing is that equals. Equals 

856.859
slide
class ham lnhexlc A21 damn Object new 10 nuciacxlngl123 fach321K haw 10 1n7 cxl 1g U 1 cuncatl n l fetch Inc In 1e fact m 7 a 1n whale rm 1 m lump tag me 1 a e e a Paul fact s 120 coop pxuqxam successfully executed Scat W lnstmctlnn 4y zead 3053 wrlce 525 bxanche ucher JSJU CuznOE cuu wh caulc fac c a ul c Chengdu p spun 3 32 3pm Verslun 5 5 at January 4 2003 Cupyllth Jaaoezaos by James a Lam uamaecamaeedm An mama Reserved see me nae mum fax a full Cupyllqm nuclce Luaded Insr 1b Exap handler 4 Inczeaslhg heap Ihcxeaaand heap Incxeaaand heap Incxeaaand heap Incxeaaand heap Incxeaaand heap Incxeaaand heap Incxeaaand heap Incxeaaand heap Ihcxeaaand heap Incxeaaand heap Ihaxeaaand heap Incxeaaand heap Incxeaaand heap Ihaxeaaaud heap ran c expand data seamed by 55535 byte 0 3334332 bytes pae rldaca with a 3334332 cemaa D
operator in cool is the comparison operators. [inaudible] Well we compared I 

862.109
writing

with O and that returns a boullion. So these are perfectly valid cool expressions. They just happen to be boullions. So, you don&#39;t ever actually I or factorial in this program. Your just comparing fact with factoid body and I with I minus one and the program is perfectly happy to do that. It just doesn&#39;t compute the factorial function. And it never terminates, because I never reaches zero. So that concludes our factorial example. And we&#39;ll do one more example next time of a more complicated, of a, of a cool program with some non-trivial data structures. 

