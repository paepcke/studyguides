00:00:00
slide
Compilers 1 SLR Improvements
00:00:20
slide
SLR Improvements Rerunning the viable prefixes automaton on the stack at each step is wasteful Most of the work is repeated
00:00:30
writing

00:01:20
slide
Remember the state of the automaton on each prefix of the stack Change stack to contain pairs Symbol DFA State SLR Improvements
00:01:45
slide
SLR Improvements For a stack syml state1 symn Staten staten is the final state of the DFA on sym1 symn Detail The bottom ofthe stack is any start where any is any dummy symbol start is the start state of the DFA
00:01:50
writing

00:02:50
slide
SLR Improvements Define goto i A j if statei AA state goto is just the transition function of the DFA One of two parsing tables
00:02:55
writing

00:03:55
slide
SLR Improvements For each state 5i and terminal a If si has item X 013B and goto i a j then action i a shiftj If si has item X on and a e Foliow X and X t then action i a reduce X or If si has item S then action i accept Otherwise action i a error
00:04:20
writing

00:06:50
slide
SLR Improvements Let I w be initial input Let j 0 Let DFA state 1 have item 5 Let stack dummy 1 repeat case action top state stack iLi of shift k push l i k reduce X a A mm W pairs push X goto top state stack accept halt normally error halt and report error Alex um
00:07:00
writing

00:10:00
slide
SLR Improvements Note that the algorithm uses only the DFA states and the input The stack symbols are never used However we still need the symbols for semantic actions
00:10:30
slide
SLR Improvements Some common constructs are not SLR 1 LR 1 is more powerful Build lookahead into the items An LR 1 item is a pair LR O item x lookahead T4 int T S means After seeing int T reduce if lookahead is S More accurate than just using follow sets Take a look at the LR 1 automaton for your parser Max Amen
00:10:40
writing

