abstract syntax tree
accepting
accumulator
activation record
actual
addition
algorithm
allocate
allocation
alphabet
alternative
application
architecture
argument type
array
assembly
assignment
assumption
attribute
bar
basic block
beta
better
big
blank
body
bottom parsing
boundary
branch
build
bunch
byte
cache
calling
cast
catch
change
character
child
clearly
close paren
code generation
coloring
common
compile time
complete
complicated
compute
configuration
conflict
consistent
consists
constant
construct
content
context free grammar
continue
control flow graph
cool
copy
correct
cost
current
cycle
data
dead
decide
decision
declaration
declared
define
derivation
design
detail
deterministic
dfa
digit
discussion
dispatch
dollar
domain
dot
double
dynamic type
easy
edge
element
empty string
entry
epsilon
equal
error
evaluate
evaluating
evaluation
exception
executes
executing
execution
expression type
factorial
false
feature
field
figure
file
final state
finite automaton
first position
first production
first set
floating point
focus
follow set
formal
fortran
frame pointer
function call
future
garbage collection
general
generate code
generating
global
guaranteed
hand side production
handle
hard
heap
high
hold
identifier
implementation
increment
inheritance
initialization
inner
input pointer
input string
inside
instruction
integer
interaction
interested
interface
interference
intermediate code
issue
item
java
jump
keyword
layout
lead
left hand side
leftmost
letter
level
lexical analysis
lexical specification
list
live
load
local
long
loop
mark
match
meaning
memory location
mistake
multiple
neighbor
nested
nfa
node
nonterminal
notation
open paren
operation
operator
optimization
optional
ordering
pair
parameter
parens
parse tree
parser
pass
path
people
perform
phase
pick
piece code
pointer point
pop
possibility
predecessor
predicate
prime
print
procedure
process
produce
program point
programmer
programming language
property
push
question
reachable object
ready
reason
recall
recursive descent
reduced
reduction
reference count
register
regular expression
relationship
replace
representation
return address
return true
return type
rightmost
root
running
save
scope
semantic analysis
semantics
sense
sentence
sequence
set state
set string
shift reduce
signature
size
slide
small
sound
special
spill
stack machine
stack pointer
start state
start symbol
state input
statement block
static type
stock
strategy
string language
structure
stuff
subclass
subset
subtraction
subtype
succeeds
table
talking
technique
template
temporary
terminal symbol
thread
throw
today
token class
top stack
transition
twelve
type checking
type class
type environment
type object
type system
typed
types
typically
typing
understand
union
unreachable
updated store
upper bound
valid
viable prefix
white space
wind
working
writing
written
